#!/usr/bin/perl 
# -*- perl -*-

use IO::File;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.1;

use Getopt::Long;

my $debug = 1;    # 0: quiet, 1: normal, 2: verbose

sub osm_round {
    my $real    = shift;
    my $number  = shift || 100_000;
    my $padding = 1;

    # how many digits after the '.'
    my $counter = 0;
    for ( my $i = $number ; $i > 1 ; $i = $i / 10 ) {
        $counter++;
    }

    my $round = int( $real * $number + 0.5 ) / $number;

    if ($padding) {
        my $digits = $round;
        $digits =~ s/^\d*\.?//;

        warn "Digits: $digits\n" if $debug >= 2;

        # no digits at all
        $round .= '.' if !$digits;

        for ( my $i = length($digits) ; $i < $counter ; $i++ ) {
            $round .= '0';
        }
    }

    warn "$real <-> $round ", $real - $round, "\n"
      if $debug >= 2 && $real != $round;

    return $round;
}

sub usage () {
    <<EOF;
usage: $0 [--debug={0..2}] [options] city

--debug=0..2	  debug option
--lang
--population
--coord
--centerdelta
--area=area
--city-by-lang=lang
EOF
}

my $lang;
my $population;
my $coord;
my $centerdelta;
my $area;
my $city_by_lang;

GetOptions(
    "debug=i"        => \$debug,
    "lang"           => \$lang,
    "population"     => \$population,
    "coord"          => \$coord,
    "centerdelta"    => \$centerdelta,
    "area=s"         => \$area,
    "city-by-lang=s" => \$city_by_lang,
) or die usage;

my $city = shift;
die &usage if !( $city || $area || $city_by_lang );

$city =~ s/-(convert|download)$// if $city;

my $db = $0;
$db =~ s,/+[^/]+$,/../misc/cities.csv,;
my %hash;

my $fh = new IO::File $db, "r" or die "open: $!\n";
while (<$fh>) {
    chomp;
    s/^\s+//;
    next if /^#/ || $_ eq "";

    my ( $city, $name, $lang, $area, $coord, $population ) = split(/:/);
    $hash{$city} = {
        city       => $city,
        name       => $name,
        lang       => $lang || "de",
        area       => $area || "de",
        coord      => $coord,
        population => $population || 1,
    };
}
close $fh;

if ( defined $area ) {
    while ( my ( $key, $val ) = each %hash ) {
        next if $key eq 'dummy';
        print $key, "\n" if $hash{$key}->{area} eq $area;
    }
    exit 0;
}

if ( defined $city_by_lang ) {
    while ( my ( $key, $val ) = each %hash ) {
        next if $key eq 'dummy';
        print $key, "\n"
          if $city_by_lang eq 'any' || $hash{$key}->{lang} eq $city_by_lang;
    }
    exit 0;
}

#use Data::Dumper; print Dumper( \%hash );
if ( exists $hash{$city} ) {
    if ($lang) {
        print $hash{$city}->{lang} ? $hash{$city}->{lang} : "de";
        print " ";
    }
    if ($coord) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "$x1 $y1 $x2 $y2 ";
    }
    if ($centerdelta) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "$x1,$y1 ";
    }
    if ($population) {
        print $hash{$city}->{population}, "\n";
    }

    # else { warn "unknown directive\n"; die &usage; }
}
else {
    warn "Unknown city: $city\n";
    &usage;
}
