#!/usr/local/bin/perl 
# Copyright (c) 2009-2011 Wolfram Schneider, http://bbbike.org
#
# bbbike-db - command line tool to parse bbbike @ world city database

use File::Basename;
use Data::Dumper;

#use GPS::Point;

use lib '.';
use lib './world/bin';
use lib '../bbbike/world/bin';
use lib '../..';
use lib '../bbbike';
use BBBikeWorldDB;
use Strassen::Util;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.1;

use Getopt::Long;

my $debug = 1;    # 0: quiet, 1: normal, 2: verbose
binmode \*STDOUT, ":utf8";
binmode \*STDERR, ":utf8";

sub osm_round {
    my $real    = shift;
    my $number  = shift || 100_000;
    my $padding = 1;

    # how many digits after the '.'
    my $counter = 0;
    for ( my $i = $number ; $i > 1 ; $i = $i / 10 ) {
        $counter++;
    }

    my $round = int( $real * $number + 0.5 ) / $number;

    if ($padding) {
        my $digits = $round;
        $digits =~ s/^\d*\.?//;

        warn "Digits: $digits\n" if $debug >= 2;

        # no digits at all
        $round .= '.' if !$digits;

        for ( my $i = length($digits) ; $i < $counter ; $i++ ) {
            $round .= '0';
        }
    }

    warn "$real <-> $round ", $real - $round, "\n"
      if $debug >= 2 && $real != $round;

    return $round;
}

sub poly {
    my ( $city, $x1, $y1, $x2, $y2 ) = @_;
    my $data = "";

    $data .= "$city\n";
    $data .= "1\n";

    $data .= "   $x1  $y1\n";
    $data .= "   $x2  $y1\n";
    $data .= "   $x2  $y2\n";
    $data .= "   $x1  $y2\n";

    $data .= "END\n";
    $data .= "END\n";

    return $data;
}

sub distance {
    my $a = shift;
    my $b = shift;

    my ( $x1, $y1, @rest )  = split( $", $a );
    my ( $x2, $y2, @rest2 ) = split( $", $b );

    my $distance = Strassen::Util::strecke_polar( [ $x1, $y1 ], [ $x2, $y2 ] );
    return int( $distance / 1_000 );
}

sub city_length {
    my $coord = shift;

    my ( $x1, $y1, $x2, $y2 ) = split( /\s+/, $coord );

    my $distance = Strassen::Util::strecke_polar( [ $x1, $y1 ], [ $x2, $y2 ] );
    return int( $distance / 1_00 ) / 10;
}

sub neighbours {
    my %args = @_;

    my $db   = $args{'db'};
    my $city = $args{'city'};

    my @list;

    my $coord = $db->{"_city"}->{$city}->{'coord'};
    foreach my $c ( keys %{ $db->{"_city"} } ) {
        push(
            @list,
            [
                &distance( $coord, $db->{"_city"}->{$c}->{'coord'} ), $c,
                $db->{"_city"}->{$c}->{'name'}
            ]
        );
    }

    @list = sort { $a->[0] <=> $b->[0] } @list;
    while ( scalar(@list) > 32 ) {
        pop @list;
    }
    local ($Data::Dumper::Indent) = 0;
    my $data = Dumper( \@list );

    $data =~ s/^\S+\s*=\s*//;
    $data =~ s/;//;

    return $data;
}

#sub distance {
#    my $coord = shift;
#
#    my @data = split( /\s+/, $coord );
#
#    my $point  = GPS::Point->new( 'lat' => $data[0], 'lon' => $data[1] );
#    my $point2 = GPS::Point->new( 'lat' => $data[2], 'lon' => $data[3] );
#
#    my $distance = $point->distance($point2);
#
#    # in 9.2 km format
#    return int( $distance / 100 ) / 10;
#}

sub usage () {
    <<EOF;
usage: $0 [--debug={0..2}] [options] city

--debug=0..2	  debug option
--lang
--local-lang
--population
--neighbours
--coord
--poly
--centerdelta
--area=area
--city-by-lang=de|en
--city-names
--city-stat
--step
--list
--city-database=/path/to/etc/cities.csv
EOF
}

my $lang;
my $local_lang;
my $step;
my $population;
my $coord;
my $poly;
my $centerdelta;
my $area;
my $city_en;
my $list;
my $city_names;
my $city_database;
my $neighbours;
my $city_stat;

GetOptions(
    "debug=i"         => \$debug,
    "lang"            => \$lang,
    "local-lang"      => \$local_lang,
    "step"            => \$step,
    "city-names"      => \$city_names,
    "population"      => \$population,
    "neighbours"      => \$neighbours,
    "coord"           => \$coord,
    "poly"            => \$poly,
    "centerdelta"     => \$centerdelta,
    "area=s"          => \$area,
    "city-en"         => \$city_en,
    "city-stat"       => \$city_stat,
    "list"            => \$list,
    "city-database=s" => \$city_database,
) or die usage;

my $city = shift;
die &usage if !( $city || $area || $city_en || $list || $city_stat );

$city =~ s/-(convert|download)$// if $city;

my $database =
  $city_database ? $city_database : dirname( dirname($0) ) . "/etc/cities.csv";

my %hash;

my $db = BBBikeWorldDB->new( 'database' => $database, 'debug' => 0 );
%hash = %{ $db->city };

if ( defined $area ) {
    while ( my ( $key, $val ) = each %hash ) {
        print $key, "\n" if $hash{$key}->{area} eq $area;
    }
    exit 0;
}

if ( defined $city_stat ) {
    foreach my $city ( $db->list_cities ) {
        print "$city =>\t";
        print &city_length( $db->city->{$city}->{"coord"} ) . "\t";

        my %hash;
        foreach my $l (qw/de en da es fr hr nl pl pt ru zh/) {
            my $c = $db->city->{$city};

            my $name =
              $db->select_city_name( $c->{"city"}, $c->{"name"} || $city, $l );
            if ( exists $hash{$name} ) {
                $hash{$name} .= "," . $l;
            }
            else {
                $hash{$name} = $l;
            }
        }
        foreach my $name ( sort keys %hash ) {
            print "$name:" . $hash{$name} . " ";
        }
        print "\n";

    }
    exit;
}

if ( $list || $city_en ) {
    foreach my $key ( sort keys %hash ) {
        my $val = $hash{$key};
        my $local_lang = $hash{$key}->{local_lang} eq 'de' ? 'de' : "en";
        print $key, "\n"
          if $list
              || $local_lang eq 'en';
    }
    exit 0;
}

if ( exists $hash{$city} ) {
    if ($lang) {
        print $hash{$city}->{lang} ? $hash{$city}->{lang} : "en";
        print " ";
    }
    elsif ($local_lang) {
        print $hash{$city}->{local_lang} ? $hash{$city}->{local_lang} : "en";
        print " ";
    }
    elsif ($city_names) {
        print $hash{$city}->{name} ? $hash{$city}->{name} : $city;
    }
    elsif ($coord) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "$x1 $y1 $x2 $y2 ";
    }
    elsif ($poly) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print &poly( $city, ( $x1, $y1, $x2, $y2 ) );
    }
    elsif ($centerdelta) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "$x1,$y1 ";
    }
    elsif ($population) {
        print $hash{$city}->{population}, "\n";
    }
    elsif ($neighbours) {
        print &neighbours( 'city' => $city, 'db' => $db );
    }
    elsif ($step) {
        print $hash{$city}->{step}, "\n";
    }

    else { warn "unknown directive\n"; die &usage; }
}
else {
    warn "Unknown city: $city\n";
    &usage;
}
