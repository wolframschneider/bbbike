#!/usr/local/bin/perl 
# -*- perl -*-
#
# Copyright (c) Wolfram Schneider, May 2009
#
# extract-streetnames-osm - extract street names from an OpenStreetMap
#	XML dump. The output format is:
#
#		streetname <tab> lon,lat
#
# you can use this script to build an OpenSearch suggestion database
#

use XML::LibXML::Reader;
use IO::File;
use File::Temp;
use Data::Dumper;
use Getopt::Long;
use Search::Dict;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.1;

# unicode sort(1) mess
$ENV{'LANG'} = 'C';

my $debug  = 1;    # 0: quiet, 1: normal, 2: verbose
my $sort   = 0;
my $uniq   = 1;
my $unlink = 1;
my $help;
my $area_lookup;

my $xmlparser;

sub usage () {
    <<EOF;
usage: $0 [ options ] osm_files ....

--debug=0..2	  debug option, default: $debug
--sort=0|1	  sort street names, default: $sort
--uniq=0|1	  filter street names, default: $uniq
--unlink=0|1	  remove temporary databases, default: $unlink
--area-lookup	  lookup database for areas
osmfile ...       Files downloaded by downloadosm,
                  or directory containing .osm files
EOF
}

sub extract_nodes {
    my $reader     = shift;
    my $fd_nodes   = shift;
    my $fd_streets = shift;

    my $flag              = 0;
    my $parse_street_flag = 0;

    my @todo;

    while ( $flag || $reader->nextElement == 1 ) {
        last if !$reader->name;

        $flag = 0;

        if ( $reader->name eq 'node' ) {
            my $id  = $reader->getAttribute('id');
            my $lat = $reader->getAttribute('lat');
            my $lon = $reader->getAttribute('lon');

            #print $fd_nodes $id, "\t", $lon, ",", $lat, "\n";

            my %tag;
            while ( $reader->nextElement == 1 ) {
                my $node_name = $reader->name;

                if ( $node_name eq 'tag' ) {
                    $tag{ $reader->getAttribute('k') } =
                      $reader->getAttribute('v');
                }
                else {

                    # already read the next node
                    $flag = 1;
                    last;
                }
            }

            if ( $tag{'place'} ) {
                my $name = $tag{'name'} || '';

                # city name in other languages
                my %citynames;
                foreach my $key ( keys %tag ) {
                    if ( $key =~ /^name:(\w+)$/ ) {
                        push( @{ $citynames{$key} }, $1 );
                    }
                }
                foreach my $lang ( keys %citynames ) {
                    $name .= " / $lang [" . join( ',', @{ $citynames{$lang} } ),
                      ']';

                }

                $name .= ' [ZIP ' . $tag{'postal_code'} . ']'
                  if exists $tag{'postal_code'} && $name;

                my $is_in = $tag{'openGeoDB:is_in'} || $tag{'is_in'};
                $name .= ' [is in: ' . $is_in . ']' if $is_in;

                $name =~ s/^\s+//;
                $name =~ s/\s+$//;
                $name =~ s/\t/ /g;
                $name =~ s/  +/ /g;
                $name =~ s/^\s*$//;

                if ($name) {
                    print $fd_streets $name, "\t", "$lon,$lat", "\n";
                }
            }
        }
    }
}

######################################################################
#
# main
#

GetOptions(
    "help"          => \$help,
    "debug=i"       => \$debug,
    "sort=i"        => \$sort,
    "unlink=i"      => \$unlink,
    "uniq=i"        => \$uniq,
    "area_lookup=s" => \$area_lookup,
) or die usage;

my @osm_files = @ARGV;
die &usage if $help or !@osm_files;

my $reader;
my $fh;
for my $osm_file (@osm_files) {

    warn "Parse osm db $osm_file ...\n" if $debug >= 2;

    if ( $osm_file =~ m{\.osm\.bz2$} ) {
        open $fh, "-|", "osm_bzcat", $osm_file
          or die "Can't run bunzip2 on $osm_file: $!";
    }
    elsif ( $osm_file =~ m{\.osm\.gz$} ) {
        open $fh, "-|", "osm_zcat", $osm_file
          or die "Can't run gzip on $osm_file: $!";
    }
    elsif ( $osm_file =~ m{\.osm$} ) {
        open $fh, $osm_file
          or die "Can't open $osm_file: $!";
    }
    elsif ( $osm_file eq '-' ) {
        $fh = \*STDIN;
    }
    else {
        warn "Unknown file extenstion: $osm_file\n";
        warn "Expect *.osm.gz, *.osm.bz2, *.osm or '-'\n";
        exit(1);
    }

    binmode( $fh, ":utf8" );

    $reader = XML::LibXML::Reader->new( IO => $fh );

    #my $reader = XML::LibXML::Reader->new( location => $osm_file );

    # check if osm file
    $reader->nextElement;
    if ( $reader->name ne 'osm' ) {
        die
"The file '$osm_file' is not starting with a <osm> tag, probably not an osm file?";
    }

    my $fd_streets = File::Temp->new( UNLINK => $unlink, SUFFIX => '.streets' )
      or die "File::Temp: $!\n";
    my $fd_nodes;
    binmode( $fd_streets, ":utf8" );

    extract_nodes( $reader, $fd_nodes, $fd_streets );

    my $place_filename = $fd_streets->filename;
    my $street_db = new IO::File $place_filename, "r"
      or die "open $place_filename: $!\n";

    my $fd_sort;
    if ($sort) {
        open $fd_sort, "|-", "sort", "-uf"
          or die "Can't run sort: $!";

        while (<$street_db>) { print $fd_sort $_; }
    }
    else {
        while (<$street_db>) { print $_; }
    }

    if ( !$unlink ) {
        warn "Streets: ", $fd_streets->filename, "\n";
    }
}

