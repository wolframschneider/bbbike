#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: bbr2bbd,v 1.12 2007/03/09 00:47:26 eserte Exp $
# Author: Slaven Rezic
#

#
# To create a .bbd file of all .bbr files:
#   cd ~/.bbbike/route/touren
#   ~/src/bbbike/miscsrc/bbr2bbd -cat '#800000' -f -usebasename -dest /tmp *.bbr
#   cat /tmp/*.bbd > /tmp/all
#   mv /tmp/all /tmp/all.bbd
#

use strict;
use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../lib",
	);
#use vars qw($coords_ref $realcoords_ref $search_route_points_ref);
my %opt = (cat => "X", name => "Route", f => 0, usebasename => 0);
use Getopt::Long;
use File::Basename;
use Route;
use Route::Heavy;

if (!GetOptions(\%opt,
		"cat=s", "cats=s", "name=s", "dest=s", "f", "usebasename",
		"route-data","data-route",
		"include-length-to-name", "include-moddate-to-name",
	       )) {
    die "usage:
    $0 [-cat category | -cats category,category,...] [-name routename]
       [-usebasename] [-dest directory] [-f] [-data-route] [-route-data]
       [-include-length-to-name] [-include-moddate-to-name]
       [from to | files ...]
";
}

my $cat_i = 0;
my @cats;
if ($opt{cats}) { # use round-robin categories
    @cats = split /,/, $opt{cats};
}

if ($opt{dest}) {
    warn "Using batch conversion to directory $opt{dest}\n";
    if (!-d $opt{dest} || !-w $opt{dest}) {
	die "$opt{dest} is no directory or not writable";
    }
    foreach my $f (@ARGV) {
	my $dest = basename($f);
	$dest =~ s/\.bbr$/\.bbd/g;
	eval {
	    convert_one_file($f, "$opt{dest}/$dest");
	};
	if ($@) {
	    warn $@;
	}
    }
} else {
    convert_one_file(@ARGV[0,1]);
}

sub convert_one_file {
    my $in_file  = shift;
    my $out_file = shift;

    if (defined $in_file) {
	open(IN, "< $in_file") or die "Can't open $in_file: $!";
    } else {
	open(IN, "<&STDIN");
    }

    my $open_out_file = sub {
	if (defined $out_file) {
	    if ($in_file eq $out_file) {
		die "In and out files are the same";
	    }
	    if (-e $out_file && !$opt{f}) {
		die "$out_file already exists";
	    }
	    open(OUT, "> $out_file") or die "Can't create $out_file: $!";
	} else {
	    open(OUT, ">&STDOUT");
	}
    };

    my $first_line = scalar <IN>;
    my $conversion;
    if ($opt{"data-route"}) {
	$conversion = "bbd2bbr";
    } elsif ($opt{"route-data"}) {
	$conversion = "bbr2bbd";
    } else {
	# guess conversion
    }
    my @in_data;
    if (defined $first_line && $first_line =~ /^\#BBBike\s+route/) {
	$conversion = "bbr2bbd" if !defined $conversion;
    } else {
	if (defined $first_line && $first_line =~ /^\s*\#/) {
	    while(<IN>) {
		if (!/^\s*\#/) {
		    $first_line = $_;
		    last;
		}
	    }
	}
	# This heuristic may fail...
	if (defined $first_line && $first_line =~ /^([^\t]*)\t(\S+)\s+([-+0-9].*)$/) {
	    $conversion = "bbd2bbr" if !$conversion;
	    @in_data = ($1, $2, $3);
	} else {
	    #warn "<$in_file>: Unknown input file format, assuming Route file";
	    $conversion = "bbr2bbd" if !$conversion;
	}
    }
    close IN;

    if ($conversion eq 'bbr2bbd') {
	my $name = $opt{name};
	if ($opt{usebasename}) {
	    ($name) = fileparse($in_file, "\\..+\$");
	}
	my $cat;
	if (@cats) {
	    $cat = $cats[$cat_i++];
	    if ($cat_i > $#cats) {
		$cat_i = 0;
	    }
	} else {
	    $cat = $opt{cat};
	}
	my $str = Route::as_strassen($in_file, name => $name, cat => $cat, fuzzy => 1);
	if (!$str) {
	    die "Die Datei <$in_file> enthält keine Route."
	}
	if ($opt{'include-length-to-name'} || $opt{'include-moddate-to-name'}) {
	    my $len = 0;
	    my $moddate;

	    if ($opt{'include-length-to-name'}) {
		require BBBikeUtil;
		require Strassen::Stat;
		$str->init;
		while(1) {
		    my $ret = $str->next;
		    last if !@{ $ret->[Strassen::COORDS()] };
		    $len += Strassen::total_len($ret);
		}
	    }

	    if ($opt{'include-moddate-to-name'}) {
		my(@s) = stat($in_file);
		if (@s) {
		    my @l = localtime $s[9];
		    $moddate = sprintf "%04d-%02d-%02d", $l[5]+1900, $l[4]+1, $l[3];
		}
	    }

	    my $new_str = Strassen->new;
	    $str->init;
	    while(1) {
		my $ret = $str->next;
		last if !@{ $ret->[Strassen::COORDS()] };
		if ($len) {
		    $ret->[Strassen::NAME()] .= " (" . BBBikeUtil::m2km($len) . ")";
		}
		if ($moddate) {
		    $ret->[Strassen::NAME()] .= " (" . $moddate . ")";
		}
		$new_str->push($ret);
	    }
	    $str = $new_str;
	}
	$open_out_file->();
	print OUT $str->as_string;

## XXX not used anymore (?)
# 	require Safe;
# 	my $compartment = new Safe;
# 	$compartment->share(qw($realcoords_ref $coords_ref
# 			       $search_route_points_ref
# 			      ));
# 	$compartment->rdo($in_file);

# 	die "Die Datei <$in_file> enthält keine Route."
# 	    if (!defined $realcoords_ref);

# 	if (defined $coords_ref) {
# 	    warn "Achtung: <$in_file> enthält altes Routen-Format.\n".
# 		"Koordinaten können verschoben sein!\n";
# 	}

# 	my $name = $opt{name};
# 	if ($opt{usebasename}) {
# 	    ($name) = fileparse($in_file, "\\..+\$");
# 	}
# 	print OUT "$name\t$opt{cat}";
# 	foreach (@$realcoords_ref) {
# 	    print OUT " " . $_->[0] . "," . $_->[1];
# 	}
# 	print OUT "\n";
    } else { # bbd2bbr
	my @coords = split(/\s+/, $in_data[2]);
	$open_out_file->();
	print OUT "#BBBike Route\n";
	print OUT "\$realcoords_ref = [";
	foreach (@coords) {
	    print OUT "[" . $_ . "],";
	}
	print OUT "];\n";
	print OUT "\$search_route_points_ref = [";
	print OUT "['" . $coords[0] . "','m'],";
	print OUT "['" . $coords[-1] . "','a'],";
	print OUT "];\n";
    }

    close OUT;
}

__END__
