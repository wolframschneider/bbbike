#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: grepstrassen,v 1.10 2005/07/19 23:29:53 eserte Exp eserte $
# Author: Slaven Rezic
#

# Strassen-Dateien filtern
# Similar to Strassen::CoreHeavy::grepstreets

use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../data",
	 "$FindBin::RealBin/../lib",
	);
use Strassen::Core;
use Strassen::Stat;
use strict;

use Getopt::Long;
my($v, $cat, $catrx, $name, $namerx, $section, $sectionrx);
my($minarea, $minlength);
my %special;
my %special_end;
GetOptions("v" => \$v,
	   "cat=s" => \$cat,
	   "catrx=s" => \$catrx,
	   "name=s" => \$name,
	   "namerx=s" => \$namerx,
	   "section=s" => \$section,
	   "sectionrx=s" => \$sectionrx,
	   "special=s" => sub {
	       no strict 'refs';
	       &{"init_" . $_[1]}($_[1]);
	   },
	   "minarea=f" => \$minarea,
	   "minlength=f" => \$minlength,
	  ) or die <<EOF;
usage: $0 [-v] [-cat category] [-catrx regexp]
       [-name name] [-namerx regexp]
       [-section section] [-sectionrx regexp]
       [-special name] [-minarea ...km²] [-minlength ...km]

section is a region marked with the "section" directive in a bbd file.

EOF

$catrx = qr{$catrx} if $catrx;
$namerx = qr{$namerx} if $namerx;
$sectionrx = qr{$sectionrx} if $sectionrx;
$minarea = $minarea*(1000*1000) if defined $minarea;
$minlength = $minlength*1000 if defined $minlength;

my $datafile = shift || "-";

my $s = Strassen->new($datafile, UseLocalDirectives => 1);
my $new_s = Strassen->new;
$s->init;
while(1) {
    my $r = $s->next;
    if (!$r->[1]) {
	die "Empty coords array found in line " . $s->pos . ", file " . $datafile;
    }
    last if !@{ $r->[1] };
    if (defined $name) { if ($r->[0] eq $name) { next if $v } else { next unless $v } }
    if (defined $namerx) { if ($r->[0] =~ $namerx) { next if $v } else { next unless $v } }
    if (defined $cat) { if ($r->[2] eq $cat) { next if $v } else { next unless $v } }
    if (defined $catrx) { if ($r->[2] =~ $catrx) { next if $v } else { next unless $v } }
    my $dir = $s->get_directive;
    if (defined $section) { if (defined $dir->{section} && grep { $_ eq $section } @{ $dir->{section} }) { next if $v } else { next unless $v } }
    if (defined $sectionrx) { if (defined $dir->{section} && grep { /$sectionrx/ } @{ $dir->{section} }) { next if $v } else { next unless $v } }
    if (defined $minarea && $r->[2] =~ /^F:/) { if (Strassen::area($r) >= $minarea) { next if $v } else { next unless $v } }
    if (defined $minlength && $r->[2] !~ /^F:/ && @{$r->[1]} > 1) { if (Strassen::total_len($r) >= $minlength) { next if $v } else { next unless $v } }	
    while(my($k,$v) = each %special) {
	next if !$v->($r, $dir);
    }
    $new_s->push_ext($r, $dir);
}

while(my($k,$v) = each %special_end) {
    $v->();
}

# XXX The "# filtered" is a hack to prevent the first line being interpreted
# as a global directive.
print "# filtered\n" . $new_s->as_string;

# XXX make generic: init_directive_handler, special_directive_handler, end_directive_handler
# XXX for fragezeichen/XXX etc.
sub init_fragezeichen {
    my $val = shift;
    no strict 'refs';
    $special{$val} = \&{"special_" . $val};
    require Storable;
    use vars qw($fragezeichen_s);
    $fragezeichen_s = Strassen->new;
    $special_end{$val} = \&{"end_" . $val};
}

sub special_fragezeichen {
    my($r, $dir) = @_;
    my $fragezeichen_r = Storable::dclone($r);
    if (exists $dir->{add_fragezeichen}) {
	my $name = $r->[Strassen::NAME] . " (";
	my @add_names = grep { !/^\s*$/ } @{ $dir->{add_fragezeichen} };
	if (!@add_names) {
	    @add_names = "unsicher";
	}
	$name .= join("; ", @add_names);
	$name .= ")";
	$fragezeichen_r->[Strassen::NAME] = $name;
	$fragezeichen_r->[Strassen::CAT] = "?";
	$fragezeichen_s->push($fragezeichen_r);
    }
    1;
}

sub end_fragezeichen {
    require File::Basename;
    $fragezeichen_s->write("/tmp/fragezeichen_" . File::Basename::basename($datafile) . ".bbd");
}

__END__
