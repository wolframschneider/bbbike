#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: grepstrassen,v 1.25 2008/02/01 23:35:14 eserte Exp $
# Author: Slaven Rezic
#

# Strassen-Dateien filtern
# Similar to Strassen::CoreHeavy::grepstreets

use strict;

use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../data",
	 "$FindBin::RealBin/../lib",
	);

use Getopt::Long;
use Storable qw(dclone);

use Strassen::Core;
use Strassen::Stat;

my($v, $cat, $catrx, $name, $namerx, $section, $sectionrx, @directive_def, @directive, @directiverx);
my($minarea, $minlength);
my $preserveglobaldirectives;
my %special;
my %special_init;
my %special_end;
my %special_data;
my %type_s;
my @inner;
my @outer;
GetOptions("v" => \$v,
	   "cat=s" => \$cat,
	   "catrx=s" => \$catrx,
	   "name=s" => \$name,
	   "namerx=s" => \$namerx,
	   "section=s" => \$section,
	   "sectionrx=s" => \$sectionrx,
	   "directive=s" => \@directive_def,
	   "special=s" => sub {
	       my $type = $_[1];
	       $special_init{$type} = 1;
	   },
	   'adddirectives=s@' => sub {
	       my $type = $_[1];
	       init_directive_handler($type);
	   },
	   "preserveglobaldirectives!" => \$preserveglobaldirectives,
	   "minarea=f" => \$minarea,
	   "minlength=f" => \$minlength,
	   'inner=s@' => \@inner,
	   'outer=s@' => \@outer,
	  ) or die <<EOF;
usage: $0 [-v] [-cat category] [-catrx regexp]
       [-name name] [-namerx regexp]
       [-section section] [-sectionrx regexp]
       [-directive key=val|key~val [-directive ...]]
       [-special name] [-minarea ...km²] [-minlength ...km]
       [-preserveglobaldirectives]
       [-inner file [-inner ...]] [-outer file [-outer ...]]

section is a region marked with the "section" directive in a bbd file.

EOF

$catrx = qr{$catrx} if $catrx;
$namerx = qr{$namerx} if $namerx;
$sectionrx = qr{$sectionrx} if $sectionrx;
$minarea = $minarea*(1000*1000) if defined $minarea;
$minlength = $minlength*1000 if defined $minlength;

for my $directive_def (@directive_def) {
    if ($directive_def =~ m{^([^=~]+)([=~])(.*)}) {
	my($key, $type, $val) = ($1, $2, $3);
	if ($type eq '=') {
	    push @directive, [$key, $val];
	} else {
	    push @directiverx, [$key, qr{$val}];
	}
    } else {
	die "Cannot parse <$directive_def>, should be key=val or key~val";
    }
}

my $datafile = shift || "-";

my $s = Strassen->new($datafile, UseLocalDirectives => 1, PreserveLineInfo => 1);
my $new_s = Strassen->new;

my(@inner_s, @outer_s);
for my $inner (@inner) {
    my $s = Strassen->new($inner);
    die "Record count of $inner is not 1" if $s->count != 1;
    $s->init;
    push @inner_s, [ map { [split /,/] } @{ $s->next->[Strassen::COORDS()] } ];
}
for my $outer (@outer) {
    my $s = Strassen->new($outer);
    die "Record count of $outer is not 1" if $s->count != 1;
    $s->init;
    push @outer_s, [ map { [split /,/] } @{ $s->next->[Strassen::COORDS()] } ];
}
if (@inner_s || @outer_s) {
    require VectorUtil;
}

for my $type (keys %special_init) {
    no strict 'refs';
    &{"init_" . $type}($type);
}

$s->init;
my @errors;
LOOP_STREETS: while(1) {
    my $r = $s->next;
    if (!$r->[1]) {
	push @errors, "Empty coords array found in file " . $datafile . ", line " . $s->line . " (please check format of line!)";
	next;
    }
    last if !@{ $r->[1] };
    # Match NAME
    if (defined $name) { if ($r->[0] eq $name) { next if $v } else { next unless $v } }
    if (defined $namerx) { if ($r->[0] =~ $namerx) { next if $v } else { next unless $v } }
    # Match CATEGORIY
    if (defined $cat) { if ($r->[2] eq $cat) { next if $v } else { next unless $v } }
    if (defined $catrx) { if ($r->[2] =~ $catrx) { next if $v } else { next unless $v } }
    my $dir = $s->get_directive;
    # Match SECTION
    if (defined $section) { if (defined $dir->{section} && grep { $_ eq $section } @{ $dir->{section} }) { next if $v } else { next unless $v } }
    if (defined $sectionrx) { if (defined $dir->{section} && grep { /$sectionrx/ } @{ $dir->{section} }) { next if $v } else { next unless $v } }
    # Match DIRECTIVES
    if (@directive) {
	for my $directive (@directive) {
	    my($key, $val) = @$directive;
	    if (defined $dir->{$key} && grep { $_ eq $val } @{ $dir->{$key} }) { next LOOP_STREETS if $v } else { next LOOP_STREETS unless $v }
	}
    }
    if (@directiverx) {
	for my $directiverx (@directiverx) {
	    my($key, $val) = @$directiverx;
	    if (defined $dir->{$key} && grep { /$val/ } @{ $dir->{$key} }) { next LOOP_STREETS if $v } else { next LOOP_STREETS unless $v }
	}
    }
    # Match length/area
    if (defined $minarea && $r->[2] =~ /^F:/) { if (Strassen::area($r) >= $minarea) { next if $v } else { next unless $v } }
    if (defined $minlength && $r->[2] !~ /^F:/ && @{$r->[1]} > 1) { if (Strassen::total_len($r) >= $minlength) { next if $v } else { next unless $v } }	
    # Match inner/outer
    # XXX using point_in_polygon is somewhat rough, probably should use something like line_in_polygon
    # XXX no -v support here!
    my @c;
    if (@inner_s || @outer_s) {
	@c = map { [ split /,/ ] } @{ $r->[Strassen::COORDS] };
    }
 INNER: {
	if (@inner_s) {
	    for my $inner (@inner_s) {
		for my $c (@c) {
		    if (VectorUtil::point_in_polygon($c,$inner)) {
			last INNER;
		    }
		}
	    }
	    next LOOP_STREETS;
	}
    }
    if (@outer_s) {
	for my $outer (@outer_s) {
	    for my $c (@c) {
		if (VectorUtil::point_in_polygon($c,$outer)) {
		    next LOOP_STREETS;
		}
	    }
	}
    }
    # Special matches
    while(my($k,$v) = each %special) {
	next if !$v->($r, $dir);
    }
    $new_s->push_ext($r, $dir);
}

if (@errors) {
    die "*** Following errors were found:\n" . join("\n", @errors) . "\n";
}

while(my($k,$v) = each %special_end) {
    $v->();
}

if ($preserveglobaldirectives) {
    $new_s->set_global_directives(dclone $s->get_global_directives);
#XXX del:
#     my $global_directives = $s->get_global_directives;
#     if ($global_directives && keys %$global_directives) {
# 	for my $global_directive (keys %$global_directives) {
# 	    print join("", map { "#: $global_directive: $_\n" } @{ $global_directives->{$global_directive} });
# 	    if ($global_directive eq 'encoding') {
# 		binmode STDOUT, ":encoding(" . $global_directives->{$global_directive}->[0] . ")";
# 	    }
# 	}
# 	print "#:\n"; # end
#     }
} else {
    # Only preserve some importing global directives:
    my $need_global_directive_separator;
    my $comment_directives = $s->get_global_directives->{'#'};
    if ($comment_directives) {
	print join("", map { "#: #: $_\n" } @$comment_directives);
	$need_global_directive_separator++;
    }
    my $encoding_directive = $s->get_global_directives->{'encoding'}->[0];
    if ($encoding_directive) {
	print "#: encoding: $encoding_directive\n";
	binmode STDOUT, ":encoding($encoding_directive)";
	$need_global_directive_separator++;
    }
    if ($need_global_directive_separator) {
	print "#:\n";
    }
    # XXX del:
    # XXX The "# filtered" is a hack to prevent the first line being interpreted
    # as a global directive.
    #print "# filtered\n" . 
}

print $new_s->as_string;

######################################################################

sub init_directive_handler {
    my $type = shift;
    $special{$type} = sub { special_directive_handler($type, @_) };
    require Storable;
    $type_s{$type} = Strassen->new;
    $special_end{$type} = sub { end_directive_handler($type, @_) };
}

sub special_directive_handler {
    my($type, $r, $dir) = @_;
    my $new_r = Storable::dclone($r);
    if (exists $dir->{$type}) {
	my $name = $r->[Strassen::NAME] . " (";
	my @add_names = grep { !/^\s*$/ } @{ $dir->{$type} };
	if (!@add_names) {
	    @add_names = $type eq 'fragezeichen' ? "unsicher" : $type;
	}
	$name .= join("; ", @add_names);
	$name .= ")";
	$new_r->[Strassen::NAME] = $name;
	$new_r->[Strassen::CAT] = "?";
	$type_s{$type}->push($new_r);
    }
    1;
}

sub end_directive_handler {
    my($type) = @_;
    require File::Basename;
    $type_s{$type}->write("/tmp/" . $type . "_" . File::Basename::basename($datafile) . ".bbd");
}

######################################################################

sub init_nextcheck {
    my $type = shift;
    no strict 'refs';
    $special{$type} = \&{"special_" . $type};
    my $check_frequency_days = 30;
    my $glob_dir = $s->get_global_directives;
    if ($glob_dir && $glob_dir->{check_frequency}) {
	($check_frequency_days) = $glob_dir->{check_frequency}[0] =~ m{(\d+)};
    }
    $special_data{$type}{check_frequency_days} = $check_frequency_days;
    require POSIX;
    $special_data{$type}{today} = POSIX::strftime("%Y-%m-%d", localtime);
    $type_s{$type} = Strassen->new;
    $special_end{$type} = sub { end_nextcheck(@_) };
    require Date::Calc;
    require Storable;
}

sub special_nextcheck {
    my($r, $dir) = @_;
    if (exists $dir->{next_check}) {
	my($y,$m,$d) = $dir->{next_check}[0] =~ m{(\d{4})-(\d{2})-(\d{2})};
	if (!$y) {
	    ($y,$m) = $dir->{next_check}[0] =~ m{(\d{4})-(\d{2})};
	    $d=1;
	}
	return if (!$y);
	my $date = sprintf "%04d-%02d-%02d", $y,$m,$d;
	if ($date lt $special_data{nextcheck}{today}) {
	    my $new_r = Storable::dclone($r);
	    $new_r->[Strassen::CAT] = "?";
	    $type_s{nextcheck}->push($new_r);
	    $type_s{nextcheck}->set_directive_for_current($dir);
	}
    } elsif (exists $dir->{last_checked}) {
	my($y,$m,$d) = $dir->{last_checked}[0] =~ m{(\d{4})-(\d{2})-(\d{2})};
	if (!$y) {
	    ($y,$m) = $dir->{last_checked}[0] =~ m{(\d{4})-(\d{2})};
	    $d=1;
	}
	return if (!$y);
	($y,$m,$d) = Date::Calc::Add_Delta_Days($y,$m,$d, $special_data{nextcheck}{check_frequency_days});
	my $date = sprintf "%04d-%02d-%02d", $y,$m,$d;
	if ($date lt $special_data{nextcheck}{today}) {
	    my $new_r = Storable::dclone($r);
	    $new_r->[Strassen::CAT] = "?";
	    $type_s{nextcheck}->push($new_r);
	    $type_s{nextcheck}->set_directive_for_current($dir);
	}
    }
}

sub end_nextcheck {
    require File::Basename;
    $type_s{nextcheck}->write("/tmp/nextcheck.bbd");
}

######################################################################
# XXX obsolete: could be replaced by -adddirectives add_fragezeichen
# BUT! this would create files /tmp/add_fragezeichen... instead of
# /tmp/fragezeichen...
# XXX Cannot handle encoding directive
sub init_fragezeichen {
    my $val = shift;
    no strict 'refs';
    $special{$val} = \&{"special_" . $val};
    require Storable;
    use vars qw($fragezeichen_s);
    $fragezeichen_s = Strassen->new;
    $special_end{$val} = \&{"end_" . $val};
}

sub special_fragezeichen {
    my($r, $dir) = @_;
    my $fragezeichen_r = Storable::dclone($r);
    if (exists $dir->{add_fragezeichen}) {
	my $name = $r->[Strassen::NAME] . " (";
	my @add_names = grep { !/^\s*$/ } @{ $dir->{add_fragezeichen} };
	if (!@add_names) {
	    @add_names = "unsicher";
	} else {
	    s/:$// for @add_names;
	}
	$name .= join("; ", @add_names);
	$name .= ")";
	$fragezeichen_r->[Strassen::NAME] = $name;
	$fragezeichen_r->[Strassen::CAT] = "?";
	$fragezeichen_s->push($fragezeichen_r);
    }
    1;
}

sub end_fragezeichen {
    require File::Basename;
    $fragezeichen_s->write("/tmp/fragezeichen_" . File::Basename::basename($datafile) . ".bbd");
}

__END__

=head1 EXAMPLES

Voraussetzung:

    cd .../bbbike/data

Alle S-Bahnhöfe finden, die nicht barrierefrei sind:

    ../miscsrc/grepstrassen -v -directive attributes~b sbahnhof-orig 

=cut
