#!/usr/local/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2009,2011,2013,2014,2015 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use FindBin;
use lib (
	 "$FindBin::RealBin/..",
	 "$FindBin::RealBin/../lib",
	 "$FindBin::RealBin/../miscsrc",
	);

use vars qw($VERSION);
$VERSION = 0.16;

use Cwd            qw(realpath);
use File::Basename qw(dirname);
use File::Temp     qw(tempfile);
use Getopt::Long;

binmode \*STDERR, ":utf8";

my @targets = ('wasserstrassen_lowres',
	       'largest_city_is_center',
	       'title_for_dataset',
	       'inaccessible_streets',
	       'strassen_cooked', # dependency: inaccessible_streets
	       'fragezeichen_cooked',
	       #'make_long_streets',
	       'mount',
	       'coastline_hack',
	       'check_crossings',
	       'check_nearest',
	       'icao_metar',
	       'addr_sort',
	       'zip_points', # dependency: addr_sort
	      );
# Targets run by default (exclude obscure ones here)
my @run_targets =
    grep { !m{^(
		  mount                 # lohnt sich nicht, zu wenige Höhenpunkte
	      |   coastline_hack        # it's a hack
	      |   check_crossings	# slow
	      |   check_nearest		# slow
	      |   icao_metar		# XXX needs unpublished scripts/modules/data, but this will change hopefully
	      |   zip_points            # experimental
	      )$}x
	  }
    @targets;

my %skip_target;
my %only_target;

# unix time command
my $time = 'time'; 

sub usage (;$) {
    my $msg = shift;
    warn $msg, "\n" if $msg;
    die "usage: $0 [--debug=0..3] [-force]\n" . join(" ", map {
	(my $optname = $_) =~ s{_}{-}g;
	"\t[-skip-$optname | -only-$optname]\n"
    } @targets) . "\tdatadir\n";
}

my $set_dataset_title;
# XXX should be generalized, or not be necessary
my $coastline_hack_anchor;

my $debug = 1;
my $force;
my $local_language = "";
my $city_names = "";
my $neighbours = [];
my $region = "";
my $other_names = "";
GetOptions(
	   (map {
	       (my $optname = $_) =~ s{_}{-}g;
	       ("skip-$optname" => \$skip_target{$_},
		"only-$optname" => \$only_target{$_},
	       );
	   } @targets),
	   "debug=i" => \$debug,
	   "local-language=s" => \$local_language,
	   "city-names=s" => \$city_names,
	   "neighbours=s" => \$neighbours,
	   "other-names:s" => \$other_names,
	   "region=s" => \$region,
	   "force!" => \$force,
	   # targets with additional arguments
	   "dataset-title=s" => \$set_dataset_title,
	   # XXX
	   "coastline-hack-anchor=s" => \$coastline_hack_anchor,
	  )
    or usage;

my $miscsrcdir = realpath $FindBin::RealBin;
my $bbbikedir = dirname $miscsrcdir;
my $datadir = shift or usage "Please specify data directory";
$datadir = realpath $datadir;
chdir $datadir or die "Can't chdir to $datadir: $!";

if (grep { $_ } values %only_target) {
    @run_targets = grep { $only_target{$_} } @targets;
}

my %targets_to_run = map { ($_, 1) } grep { !$skip_target{$_} } @run_targets;

for my $target (@run_targets) {
    if ($skip_target{$target}) {
	print STDERR "Skip target $target.\n";
	next;
    }
    delete $targets_to_run{$target};
    no strict 'refs';
    my $target_sub = "target_$target";
    if (!defined &{$target_sub}) {
	die "No subroutine for $target exists";
    }
    print STDERR "Running target $target ... " if $debug;
    &{$target_sub};
    print STDERR "\n" if $debug;
}

sub target_addr_sort {
    if (!-e "_addr") {
	print STDERR "_addr does not exist, skipping";
	return;
    }
    require Strassen::Core;
    my $glob_dir = Strassen->get_global_directives('_addr');
    if (($glob_dir->{strassen_lookup_suitable}->[0]||'') eq 'yes') {
	print STDERR "up-to-date";
	return;
    }
    require GeocoderAddr;
    my $geocoderaddr = GeocoderAddr->new('_addr');
    $geocoderaddr->convert_for_lookup('_addr_sorted');
    rename '_addr_sorted', '_addr'
	or die "Renaming _addr_sorted to _addr failed: $!";
}

sub target_zip_points {
    return if _is_up_to_date("_zip_points", ["addr"]);
    if (!-e "_addr") {
	print STDERR "_addr does not exist, skipping";
	return;
    }

    my @colors = (
		  '#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff',
		  '#800000', '#008000', '#000080', '#808000', '#800080', '#008080',
		 );
    my $color_i = -1;
    my %zip_to_color;
    my $allocate_new_color = sub {
	$color_i++;
	if ($color_i > $#colors) {
	    $color_i = 0;
	}
	$colors[$color_i];
    };
    my $get_zip_color = sub {
	my($zip) = @_;
	my $color = $zip_to_color{$zip};
	return $color if $color;
	$color = $allocate_new_color->();
	$zip_to_color{$zip} = $color;
    };

    require Strassen::Core;

    my $s = Strassen->new_stream('_addr');
    open my $ofh, ">", "_zip_points~"
	or die "Can't write to _zip_points~: $!";

    # XXX hack: streaming interface cannot deal with global directives
    my $glob_dir = Strassen->get_global_directives('_addr');
    print $ofh Strassen::global_directives_as_string($glob_dir);
    my $encoding = $glob_dir->{encoding}->[0];
    Strassen::switch_encoding($ofh, $encoding) if $encoding;

    $s->read_stream
	(sub {
	     my($r) = @_;
	     my($str, $hnr, $zip, $place) = split /\|/, $r->[Strassen::NAME()];
	     my $color = $get_zip_color->($zip);
	     print $ofh join(" ", $str, $hnr, $zip, $place) . "\t$color " . $r->[Strassen::COORDS()]->[0] . "\n";
	 });
    close $ofh
	or die "Error while writing to _zip_points~: $!";
    rename "_zip_points~", "_zip_points"
	or die "Error while renaming _zip_points~ to _zip_points: $!";
}

sub target_wasserstrassen_lowres {
    return if _is_up_to_date("wasserstrassen-lowres", ["wasserstrassen"]);

    my(undef, $tmp1) = tempfile(UNLINK => 1, SUFFIX => "-wlores.bbd") or die $!;
    my(undef, $tmp2) = tempfile(UNLINK => 1, SUFFIX => "-wlores.bbd") or die $!;
    my $cmd = <<EOF;
set -e
cat wasserstrassen | $miscsrcdir/grepstrassen --catrx '^(F:W1)\$' > $tmp1
cat wasserstrassen | $miscsrcdir/grepstrassen --catrx '^(W1|W2|F:W|F:I)\$' --minarea 3 >> $tmp1
$^X $miscsrcdir/simplify_streets -tolerance 300 -algorithm 'douglas-peucker' $tmp1 > $tmp2
mv -f $tmp2 wasserstrassen-lowres
chmod ugo-wx,ugo+r wasserstrassen-lowres
EOF
    system $cmd;
    die "The command $cmd failed: $?" if $? != 0;
}

# Note: this is not perfect. It just picks the first of the cities
# with largest category. This relies on osm2bbd to sort the cities by
# population (which it currently does). This also sets "center_name".
sub target_largest_city_is_center {
    my $meta = eval { _load_meta() };
    if ($@) {
	print STDERR $@->{msg};
	return;
    }
    if (!$force && $meta->{center}) {
	print STDERR "center already set in meta.yml, do not overwrite, skipping" if $debug;
	return;
    }
    my $max = _get_largest_city();
    if (defined $max) {
	print STDERR "setting $max->[Strassen::NAME()] ($max->[Strassen::COORDS()][0]) as center\n";
	$meta->{center} = [ split /,/, $max->[Strassen::COORDS()][0] ];
	$meta->{center_name} = $max->[Strassen::NAME()];
	_write_meta($meta);
    }
}

# By default "dataset_title" is the name of the largest city, which is
# the same as "center_name". If you need another dataset_title,
# especially if the coverage is not a city but a region, then use the
# --dataset-title option
sub target_title_for_dataset {
    my $meta = eval { _load_meta() };
    if ($@) {
	print STDERR $@->{msg};
	return;
    }
    if (!$force && $meta->{dataset_title}) {
	print STDERR "dataset_title already set in meta.yml, do not overwrite, skipping" if $debug;
	return;
    }
    if (!defined $set_dataset_title) {
	my $max = _get_largest_city();
	if (defined $max) {
	    $set_dataset_title = $max->[Strassen::NAME()];
	} else {
	    print STDERR "Cannot guess dataset title, no largest city found.\n";
	    return;
	}
    }
    print STDERR "setting $set_dataset_title as title for dataset ";
    $meta->{dataset_title} = $set_dataset_title;
    _write_meta($meta);
}

sub target_inaccessible_streets {
    return if _is_up_to_date("inaccessible_strassen", ["strassen", "gesperrt"]);

    # XXX This is a bug somewhere, maybe integer operation is used
    # somewhere?
    require Strassen::Core;
    my $glob_dir = Strassen->get_global_directives("$datadir/strassen");
    if ($glob_dir->{map} && $glob_dir->{map}[0] !~ m{^(bbbike|standard|wgs84|polar)$}) {
	print STDERR "only map=bbbike currently supported, skipping";
	return;
    }

    my(undef, $tmp) = tempfile(UNLINK => 1, SUFFIX => "-inaccessible.bbd") or die $!;
    my $cmd = <<EOF;
set -e
$miscsrcdir/search_inaccessible_points -stats -cache -shorter -street $datadir/strassen -street $datadir/faehren -blocked $datadir/gesperrt -blockedtype einbahn -blockedtype sperre > $tmp
mv -f $tmp inaccessible_strassen
chmod ugo-wx,ugo+r inaccessible_strassen
EOF
    system $cmd;
    die "The command $cmd failed: $?" if $? != 0;
}

sub target_strassen_cooked {
    return if _is_up_to_date("strassen-cooked", ["strassen", "inaccessible_strassen"]);
    die "Fatal: inaccessible_strassen not existent or empty, please make sure to run same-named postprocessing target.\n"
	if !-s "inaccessible_strassen";

    my @cmd = (
	       $^X, "$FindBin::RealBin/create_cooked_bbd",
	       "-o", "strassen-cooked",
	       "strassen", "inaccessible_strassen",
	      );
    if ($debug >= 2) {
	print STDERR "Running '@cmd'...\n";
    }
    system @cmd;
    if ($? != 0) {
	die "The command '@cmd' failed: $?";
    }
}

sub target_fragezeichen_cooked {
    return if _is_up_to_date("fragezeichen-cooked", ["strassen", "fragezeichen"]);

    my @cmd = (
	       $^X, "$FindBin::RealBin/create_cooked_bbd",
	       "-variant", "fragezeichen",
	       "-o", "fragezeichen-cooked",
	       "fragezeichen",
	       "strassen",
	      );
    if ($debug >= 2) {
	print STDERR "Running '@cmd'...\n";
    }
    system @cmd;
    if ($? != 0) {
	die "The command '@cmd' failed: $?";
    }
}

sub target_make_long_streets {
    die <<EOF;
NYI, Strassen::Combine still have bugs. Also there must be some "tag"
in the generated file to prevent useless re-calculation of the file.
EOF
}

sub target_mount {
    return if _is_up_to_date("mount", ["hoehe", "gesperrt", "strassen"]);

    my @cmd = ("$FindBin::RealBin/steigung_stat",
	       '-minmount', '1.0',
	       '-commentscompatible',
	       '-tolerant', # do not croak on linesegs with length=0
	       '-sperre', "$datadir/gesperrt",
	       '-str', "$datadir/strassen",
	       '-i', "$datadir/hoehe",
	       '-o', "$datadir/mount~"
	      );
    if ($debug >= 2) {
	print STDERR "Running '@cmd'...\n";
    }
    system @cmd;
    if ($? != 0) {
	die "The command '@cmd' failed: $?";
    }
    rename "$datadir/mount~", "$datadir/mount"
	or die "Can't rename mount~ to mount in $datadir: $!";
}

sub target_coastline_hack {
    if (!-e "$datadir/_coastline") {
	print STDERR "No _coastline file available, coastline hack not applicable...\n";
	return;
    }

    if (!$coastline_hack_anchor) {
	print STDERR "Please set -coastline-hack-anchor option!\n";
	return;
    }

    # check if coastline hack was already applied
    {
	my $do_truncate_at_pos;

	{
	    open my $fh, "$datadir/wasserstrassen"
		or do {
		    warn "'wasserstrassen' cannot be opened ($!), cannot apply coastline hack...\n";
		    return;
		};
	    my $last_pos = 0;
	    while(<$fh>) {
		if (m{^#: section coastline_hack vvv}) {
		    if (!$force) {
			print STDERR "up-to-date";
			return;
		    } else {
			$do_truncate_at_pos = $last_pos;
			last;
		    }
		}
		$last_pos = tell $fh;
	    }
	    close $fh; # explicitely close, don't rely on scope exit
	}

	# Don't use "truncate $fh" for compatibility with Win32.
	if (defined $do_truncate_at_pos) {
	    truncate "$datadir/wasserstrassen", $do_truncate_at_pos
		or die "Cannot truncate '$datadir/wasserstrassen' to position $do_truncate_at_pos: $!";
	}
    }

    my $meta = eval { _load_meta() };
    if (!$meta) {
	print STDERR "Cannot apply coastline hack without meta file.\n";
	return;
    }

    my @add_coastline;
    {
	my $bbox = $meta->{bbox} or die "Unexpected: no bbox found in meta.yml!";
	if      ($coastline_hack_anchor eq 'nw') {
	    push @add_coastline, "$bbox->[0],$bbox->[3]";
	} elsif ($coastline_hack_anchor eq 'n') {
	    push @add_coastline, "$bbox->[0],$bbox->[3]", "$bbox->[2],$bbox->[3]"; # XXX order?
	} elsif ($coastline_hack_anchor eq 'ne') {
	    push @add_coastline, "$bbox->[2],$bbox->[3]";
	} elsif ($coastline_hack_anchor eq 'w') {
	    push @add_coastline, "$bbox->[0],$bbox->[1]", "$bbox->[0],$bbox->[3]"; # XXX order?
	} elsif ($coastline_hack_anchor eq 'e') {
	    push @add_coastline, "$bbox->[2],$bbox->[1]", "$bbox->[2],$bbox->[3]"; # XXX order?
	} elsif ($coastline_hack_anchor eq 'sw') {
	    push @add_coastline, "$bbox->[0],$bbox->[1]";
	} elsif ($coastline_hack_anchor eq 's') {
	    push @add_coastline, "$bbox->[0],$bbox->[1]", "$bbox->[2],$bbox->[1]"; # XXX order?
	} elsif ($coastline_hack_anchor eq 'se') {
	    push @add_coastline, "$bbox->[2],$bbox->[1]";
	} else {
	    die "Invalid or missing value for -coastline-hack-anchor (must be a Himmelsrichtung)"; # XXX english word?
	}
    }

    my @cmd = ("$FindBin::RealBin/combine_streets.pl",
	       "-closedpolygon",
	       "-encoding", "utf-8",
	       "$datadir/_coastline",
	      );
    my @lines;
    if ($debug >= 2) {
	print STDERR "Running '@cmd'...\n";
    }
    open my $fh, "-|", @cmd
	or die "While running @cmd: $!";
    while(<$fh>) {
	next if m{^#}; # ignore comment and directive lines, for now
	push @lines, $_;
    }
    close $fh
	or die "Problem while running @cmd: $!";
    @lines = sort { length($b) <=> length($a) } @lines;
    # XXX assume first one is the sea, and others are islands
    open my $ofh, ">>", "$datadir/wasserstrassen"
	or die "Can't append to $datadir/wasserstrassen: $!";
    binmode $ofh; # combine_streets.pl output is binary
    print $ofh "#: section coastline_hack vvv\n";
    for (@lines[1..$#lines]) {
	s{\tW}{\tF:I};
	print $ofh $_;
    }
    {
	chomp $lines[0];
	$lines[0] .= " @add_coastline"; # XXX see above, possible order problem...
	$lines[0] =~ s{\tW}{\tF:W};
	$lines[0] .= "\n";
	print $ofh $lines[0];
    }
    print $ofh "#: section ^^^^^^^^^^^^^^^^^^\n";
    close $ofh
	or die "While appending coastline_hack to $datadir/wasserstrassen: $!";

    if (!$targets_to_run{'wasserstrassen_lowres'}) {
	print STDERR <<EOF;
Consider to recreate wasserstrassen-lowres by using

    $^X $0 -only-wasserstrassen-lowres $datadir

EOF
    }
}

sub target_check_crossings {
    return if _is_up_to_date("crossings.bbd", ["strassen", "strassen_bab"]);

    my @cmd = ($^X, "$FindBin::RealBin/check_crossings",
	       "-encoding", "utf-8",
	       "-included-brunnels",
	       "-o", "$datadir/crossings.bbd",
	       "$datadir/strassen", "$datadir/strassen_bab",
	       ($debug >= 3 ? "-v-if-interactive" : ()),
	      );
    if ($debug >= 2) {
	print STDERR "Running '@cmd'...\n";
    }
    system @cmd;
    die "The command @cmd failed: $?" if $? != 0;
}

sub target_check_nearest {
    return if _is_up_to_date("check_nearest.bbd", ["strassen", "strassen_bab", "fragezeichen", "faehren"]);

    my @cmd = ($^X, "$FindBin::RealBin/check_nearest",
	       "-asbbd",
	       "-strfile", "$datadir/strassen",
	       "-strfile", "$datadir/strassen_bab",
	       "-strfile", "$datadir/fragezeichen",
	       "-strfile", "$datadir/faehren",
	       "-maxdist", "20",
	      );
    if ($debug >= 2) {
	print STDERR "Running '@cmd', writing to check_nearest.bbd...\n";
    }
    open my $fh, '-|', @cmd
	or die "While running @cmd: $!";
    open my $ofh, ">", "check_nearest.bbd~"
	or die "Cannot write to check_nearest.bbd~: $!";
    while(<$fh>) {
	print $ofh $_;
    }
    close $ofh
	or die "Error while writing to check_nearest.bbd~: $!";
    rename "check_nearest.bbd~", "check_nearest.bbd"
	or die "Error while renaming to check_nearest.bbd: $!";
}

sub target_icao_metar {
    return if _is_up_to_date("icao_metar", ["icao"]);

    # Check prerequisite data
    if (!-e "icao" || -z "icao") {
	print STDERR "no icao file in generated data, skipping";
	return;
    }

    # Check prerequisite tools
    my $gweather_locations_dir = "$ENV{HOME}/devel/gweather-locations";
    my $locations_yml = "$gweather_locations_dir/Locations2.yml";
    if (!-r $locations_yml) {
	print STDERR "no Locations2.yml available, skipping";
	if ($debug >= 2) {
	    warn "File is expected in $locations_yml";
	}
	return;
    }
    if (!eval { require BBBikeYAML; 1 }) {
	print STDERR "no BBBikeYAML available, skipping";
	return;
    }

    # Process
    my $locations = BBBikeYAML::LoadFile($locations_yml); # die if problems!
    my %icao_exists = map { ($_->[0] => 1) } @$locations;
    require Strassen::Core;
    my $s = Strassen->new_stream("$datadir/icao");
    my $new_s = Strassen->new;
    $s->read_stream(sub {
			my $r = shift;
			my $name = $r->[Strassen::NAME()];
			if (my($icao) = $name =~ m{^(.{4})\s}) {
			    if ($icao_exists{$icao}) {
				$new_s->push_ext($r);
			    } elsif ($debug >= 2) {
				warn "Skipping unsupported icao location <$icao> (full name: $name).\n";
			    }
			} elsif ($debug >= 2) {
			    warn "WARN: cannot parse name <$name>\n";
			}
		    });
    $new_s->set_global_directives($s->get_global_directives);
    $new_s->write("$datadir/icao_metar~");
    rename "$datadir/icao_metar~", "$datadir/icao_metar"
	or die "Error while renaming $datadir/icao_metar~ to $datadir/icao_metar: $!";
}

######################################################################

sub _load_meta {
    # assume to be in the right directory
    if (!eval { require BBBikeYAML; BBBikeYAML->import(qw(LoadFile DumpFile)); 1 } &&
	!eval { require YAML::Syck; YAML::Syck->import(qw(LoadFile DumpFile)); 1 } &&
	!eval { require YAML;       YAML      ->import(qw(LoadFile DumpFile)); 1 }
       ) {
	die +{ msg => "no YAML::XS/YAML/YAML::Syck available, skipping",
	       code => 'NO_YAML',
	     };
    }
    my $meta = eval { LoadFile("meta.yml") };
    if (!$meta) {
	die +{ msg => "cannot load meta.yml, skipping",
	       code => 'INVALID_META',
	     };
    }
    $meta;
}

sub _write_meta {
    my $meta = shift;

    use Data::Dumper;
    $meta->{"local_language"} = $local_language;

    if (!Encode::is_utf8($city_names)) { 
	$city_names = Encode::decode("utf-8", $city_names); 
    }

    if (!Encode::is_utf8($neighbours)) { 
	$neighbours = Encode::decode("utf-8", $neighbours); 
    }
    $neighbours = eval $neighbours;
    if (!Encode::is_utf8($other_names)) { 
	$other_names = Encode::decode("utf-8", $other_names); 
    }

    $meta->{"city_names"} = $city_names;
    $meta->{"neighbours"} = $neighbours;
    $meta->{"region"} = $region;
    $meta->{"other_names"} = [ split /\s*;\s*/, $other_names ];

    DumpFile("meta.yml~", $meta);

    open my $ofh, ">", "meta.dd~"
	or die "Cannot write to meta.dd~: $!";
    binmode $ofh, ":utf8";

    print $ofh Data::Dumper->new([$meta],['meta'])->Sortkeys(1)->Useqq(1)->Dump;
    close $ofh
	or die "While closing meta.dd~: $!";
    rename "meta.dd~", "meta.dd"
	or die "While renaming meta.dd~ to meta.dd: $!";
    rename "meta.yml~", "meta.yml"
	or die "While renaming meta.yml~ to meta.yml: $!";
}

# Returns a 'Strassen' record
sub _get_largest_city {
    my $max = undef;
    require Strassen::Core;
    my $s = Strassen->new_stream("$datadir/orte");
    $s->read_stream(sub {
			my $r = shift;
			if (!defined $max || $max->[Strassen::CAT()] < $r->[Strassen::CAT()]) {
			    $max = $r;
			}
		    }, UseLocalDirectives => 0);
    $max;
}

sub _is_up_to_date {
    my($file, $deps) = @_;
    return 0 if $force;
    return 0 if !-e $file;
    for my $dep (@$deps) {
	return 0 if -M $file > -M $dep;
    }
    print STDERR "up-to-date";
    return 1;
}

__END__

=head1 NAME

osm2bbd-postprocess - do additional postprocessing of the osm2bbd result

=head1 SYNOPSIS

    osm2bbd-postprocess [--debug=0..3] [-force] [options] datadirectory

=head1 DESCRIPTION

Do additional postprocessing of the result of a L<osm2bbd> run. If no
further options are given, then some default postprocessing tasks will
be run. Usually C<osm2bbd-postprocess> can determine that a
postprocessing task was already run and won't do it again unless the
C<-force> option is given.

Run C<osm2bbd-postprocess --help> to see a list of all options and all
tasks.

The C<coastline-hack> task needs the additional option
C<-coastline-hack-anchor> with any cardinal direction (e.g. C<n>,
C<nw> etc.) for the direction of the "open sea".

=head1 AUTHOR

Slaven Rezic

=head1 SEE ALSO

L<osm2bbd>
