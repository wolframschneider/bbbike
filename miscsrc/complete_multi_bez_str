#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: $
# Author: Slaven Rezic
#
# Copyright (C) 2005 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../lib",
	 "$FindBin::RealBin/../data",
	);
use Strassen::Core;
use Strassen::MultiBezStr;

my $old_multi_bez_str = MultiBezStr->new("multi_bez_str-orig");
my %hash = $old_multi_bez_str->hash;
my %add;
my $s = Strassen->new("strassen-orig");
$s->init;
while(1) {
    my $r = $s->next;
    last if !@{ $r->[Strassen::COORDS] };
    next if $r->[Strassen::NAME] =~ /^\(/;
    my($street, $bezirke) = $r->[Strassen::NAME] =~ /^(.*?)\s+\((.*,.*)\)/;
    next if !defined $street;
    my @bezirke = split /\s*,\s*/, $bezirke;
    if (exists $hash{$street}) {
	my @cityparts1 = sort @{ $hash{$street} };
	my @cityparts2 = sort @bezirke;
	if (join("|", @cityparts1) ne join("|", @cityparts2)) {
	    die "Can't handle different streets with multiple cityparts and same name, fixing MultiBezStr is needed!";
	}
    } else {
	$add{$street} = \@bezirke;
    }
}

my %new_hash = (%hash, %add);

print "# Please edit the original: multi_bez_str-orig\n";
print join("", map { "$_\t" . join(",", @{ $new_hash{$_} }) . "\n" } sort keys %new_hash);

__END__
