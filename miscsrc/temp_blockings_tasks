#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2009,2011,2013,2016,2017 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use warnings;

sub usage (;$) {
    my $msg = shift;
    warn $msg, "\n" if $msg;
    die <<EOF;
usage: $0 task
EOF
}

my $task = shift
    or usage("Task is missing");

if ($task eq 'yml_to_permanent_bbd') {
    warn "WARNING: Please rename 'yml_to_permanent_bbd' to 'yml_to_recurring_bbd'.\n";
    $task = 'yml_to_recurring_bbd';
} elsif ($task eq 'yml_to_nonpermanent_bbd') {
    warn "WARNING: Please rename 'yml_to_nonpermanent_bbd' to 'yml_to_nonrecurring_bbd'.\n";
    $task = 'yml_to_nonrecurring_bbd';
}

if ($task eq 'pl_to_yml') {
    my $in_file = shift
	or usage("in file is missing");
    my $out_file = shift
	or usage("out file is missing");
    @ARGV and usage("extra args");

    _add_bbbike_inc();
    require BBBikeYAML;

    my $temp_blocking_records = _load_records($in_file);
    BBBikeYAML::DumpFile($out_file, $temp_blocking_records);

} elsif ($task eq 'cmp_pl_and_yml') {
    my $file_pl = shift
	or usage("pl file is missing");
    my $file_yml = shift
	or usage("yml file is missing");
    @ARGV and usage("extra args");

    require Data::Compare;
    require Data::Dumper;
    require File::Temp;

    _add_bbbike_inc();
    require BBBikeYAML;

    $file_pl = _make_abs_path($file_pl);

    use vars qw(@temp_blocking);
    local @temp_blocking;
    do $file_pl;
    die "Can't find \@temp_blocking array in $file_pl" if not @temp_blocking;
    my $y = BBBikeYAML::LoadFile($file_yml);

    no warnings 'once';
    local $Data::Dumper::Sortkeys = 1;
    if (not Data::Compare::Compare(\@temp_blocking, $y)) {
	my($tmp1fh,$tmp1file) = File::Temp::tempfile(SUFFIX => "_temp_blockings.pl") or die;
	my($tmp2fh,$tmp2file) = File::Temp::tempfile(SUFFIX => "_temp_blockings.yml") or die;
	print $tmp1fh Data::Dumper->new([\@temp_blocking],[])->Dump;
	print $tmp2fh Data::Dumper->new([$$y],[])->Dump;
	close $tmp1fh or die;
	close $tmp2fh or die;
	system("diff", "-u", $tmp1file, $tmp2file);
	exit 1;
    }

} elsif ($task eq 'yml_to_bbd') {
    my $infile = shift
	or usage "yml file is missing";
    @ARGV and usage "Extra args";

    yml_to_bbd($infile);

} elsif ($task eq 'yml_to_recurring_bbd') {
    my $infile = shift
	or usage "yml file is missing";
    @ARGV and usage "Extra args";

    yml_to_bbd($infile, filter => 'recurring');

} elsif ($task eq 'yml_to_nonrecurring_bbd') {
    my $infile = shift
	or usage "yml file is missing";
    @ARGV and usage "Extra args";

    yml_to_bbd($infile, filter => 'nonrecurring');

} elsif ($task eq 'check_recurrences') {
    require Getopt::Long;
    my $prewarn_days = 7;
    my $now;
    if (!Getopt::Long::GetOptions(
				  "prewarn-days=f" => \$prewarn_days,
				  "now=s" => \$now,
				 )) {
	die "usage: $0 $task [--prewarn-days=...] [--now=YYYY-MM-DDTHH:MM:SS] bbbike_temp_blockings.pl\n";
    }
    my $pl_file = shift
	or usage "pl file is missing";
    my $temp_blocking_records = _load_records($pl_file);
    check_recurrences($temp_blocking_records, prewarn_days => $prewarn_days, now => $now);
} else {
    usage("Task $task is unknown");
}

sub yml_to_bbd {
    my($infile, %args) = @_;
    my $filter_recurring    = $args{'filter'} && $args{'filter'} eq 'recurring';
    my $filter_nonrecurring = $args{'filter'} && $args{'filter'} eq 'nonrecurring';

    _add_bbbike_inc();
    require BBBikeYAML;

    my $x = BBBikeYAML::LoadFile($infile);
    my $done_header;
    for my $rec (@$x) {
	my $d = $rec->{data};
	next if not $d;
	next if $filter_recurring    && !($rec->{permanent} || $rec->{recurring});
	next if $filter_nonrecurring &&  ($rec->{permanent} || $rec->{recurring});
	if (!$done_header) {
	    print "#: source_file: $infile\n#:\n";
	    $done_header = 1;
	}
	if ($rec->{source_id}) {
	    my @source_ids = ref $rec->{source_id} eq 'ARRAY' ? @{ $rec->{source_id} } : $rec->{source_id};
	    for my $source_id (@source_ids) {
		print "#: by: $source_id\n";
	    }
	    my @real_source_ids = _filter_real_source_ids(@source_ids);
	    for my $source_id (@real_source_ids) {
		print "#: source_id: $source_id\n";
	    }
	}
	my $t = $rec->{text};
	$t =~ s{[\n\t]}{ }g;
	$d =~ s{^(?!\#)(.)}{
	    $t . (substr($1,0,1) eq "\t" ? "" : " ") . $1 # separate with space only if there's a non-empty name in the bbd line
	}gme;
	print $d;
    }
}

sub check_recurrences {
    my($temp_blocking_records, %args) = @_;

    my $prewarn_days = delete $args{prewarn_days};
    my $now = delete $args{now};
    die "Unhandled args: " . join(" ", %args) if %args;

    require DateTime;
    require DateTime::Event::Easter;
    require DateTime::Event::Recurrence;

    require Encode::Locale;

    my $now_dt;
    if ($now) {
	require DateTime::Format::ISO8601;
	$now_dt = DateTime::Format::ISO8601->parse_datetime($now);
    } else {
	$now_dt = DateTime->now;
    }

    my @candidates;
    my $id = -1;
    for my $record (@$temp_blocking_records) {
	$id++;
	my $set;
	for my $recurrence (@{ $record->{recurrences} || [] }) {
	    my($method, @method_args) = @$recurrence;
	    my $set;
	    if ($method eq 'easter') {
		$set = DateTime::Event::Easter->new(day => $method_args[0]);
	    } else {
		## does not work: start parameter seems to work only together with interval
		#my %method_args = @method_args;
		#if ($method_args{start}) {
		#    require DateTime::Format::ISO8601;
		#    $method_args{start} = DateTime::Format::ISO8601->parse_datetime($method_args{start});
		#}
		#$set = DateTime::Event::Recurrence->$method(%method_args);
		$set = DateTime::Event::Recurrence->$method(@method_args);
	    }
	    if ($set) {
		my $dt_last = DateTime->from_epoch(epoch => $record->{until});
		my $dt_next = $set->can('next') ? $set->next($dt_last) : $set->following($dt_last); # next for ::Recurrence, ->following for ::Easter
		if (!$dt_next) {
		    die "Cannot find next recurrence day for record '" . $record->{text} . "', id $id...";
		}
		my $this_prewarn_days = (
					 defined $record->{recurrence_prewarn_days} && $record->{recurrence_prewarn_days} < $prewarn_days
					 ? $record->{recurrence_prewarn_days}
					 : $prewarn_days
					);
		$dt_next = $dt_next->subtract(days => $this_prewarn_days);
		if ($dt_next <= $now_dt) {
		    push @candidates, { record => $record, id => $id, date => $dt_next };
		}
	    }
	}
    }

    if (@candidates) {
	require Text::Wrap;
	binmode STDOUT, ':encoding(console_out)';
	for my $candidate (sort { $a->{date} cmp $b->{date} } @candidates) {
	    my $text = $candidate->{record}->{text};
	    my $initial = sprintf("%6d: ", $candidate->{id});
	    print Text::Wrap::wrap($initial, " " x length($initial), "$candidate->{date} $text\n");
	}
	exit 1;
    } else {
	exit 0;
    }
}

sub _filter_real_source_ids {
    my(@source_ids) = @_;
    my @ret_source_ids;
    for my $source_id (@source_ids) {
	next if $source_id =~ m{^https?://};
	(my $ret_source_id = $source_id) =~ s{\s+.*}{};
	push @ret_source_ids, $ret_source_id;
    }
    @ret_source_ids;
}

sub _add_bbbike_inc {
    require lib;
    require FindBin;
    lib->import("$FindBin::RealBin/..", "$FindBin::RealBin/../lib");
}

sub _load_records {
    my $in_file = shift;
    $in_file = _make_abs_path($in_file);

    no warnings 'once';
    use vars qw(@temp_blocking);
    local @temp_blocking;
    do $in_file;
    die "Can't find \@temp_blocking array in $in_file" if not @temp_blocking;

    \@temp_blocking;
}

sub _make_abs_path {
    my $path = shift;
    require File::Spec;
    if (!File::Spec->file_name_is_absolute($path)) {
	$path = File::Spec->rel2abs($path);
    }
    $path;
}

__END__
