#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: steigung_stat,v 1.14 2006/05/17 21:33:25 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 1999,2001,2003 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://bbbike.sourceforge.net
#

use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../lib",
	 "$FindBin::RealBin/../data",
	);
use Strassen;
use Strassen::MultiStrassen;
#eval 'use BBBikeXS';
use strict;
use Getopt::Long;

my @steigung;
my %hoehe;
my $steigung_schwelle = 0.05; # darüber wird alles schwarz gezeichnet
my $o = "/tmp/steigungen.bbd";
my @strfile;
my $strfile_default = "strassen";
my $i = "hoehe";
my $v = 0;
my $commentscompatible = 0;
my $gefaelle = 0;
my $orig = 0;
my $min_mount;

# -orig is obsolete!
if (!GetOptions("i=s" => \$i,
		'str=s@' => \@strfile,
		"o=s" => \$o,
		"commentscompatible!" => \$commentscompatible,
		"gefaelle!" => \$gefaelle,
		"orig!" => \$orig,
		"minmount=f" => \$min_mount,
		"v+" => \$v,
	       )) {
    die "usage: $0 [-str strassen.bbd [-str ...]] [-i hoehe.bbd] [-o output.bbd]
                   [-[no]commentscompatible] [-[no]gefaelle] [-[no]orig] [-v]

Default for -str: $strfile_default
Default for -i: $i
Default for -o: $o
";
}

if (!@strfile) {
    push @strfile, $strfile_default;
}

if ($orig) {
    warn "The -orig option is obsolete and probably not needed!\n";

    # This is not correct, because "-orig" does not mean automatically
    # "b1996". But it's ok, because there's only a non-orig rule in
    # data/Makefile.
    require Karte;
    Karte::preload("Berlinmap1996", "Standard");
    $Karte::Berlinmap1996::obj = $Karte::Berlinmap1996::obj; # peacify -w
    $i = $i . "-orig";
    @strfile = map { $_ . "-orig" } @strfile;
}
my $str = MultiStrassen->new(@strfile);
my $netz = new StrassenNetz $str;
print STDERR "make net..." if ($v);
$netz->make_net;
print STDERR "done\n" if ($v);
read_hoehe();
my $steigungsnetz = new StrassenNetz Strassen->new;
print STDERR "make net steigung...\n" if ($v);
$steigungsnetz->make_net_steigung
    ($netz, \%hoehe,
     (defined $min_mount ? (-min => $min_mount) : ()),
     ($orig ? (-strecke => sub {
		   my($p1, $p2) = @_;
		   my($pp1,$pp2) =
		       map { $Karte::Berlinmap1996::obj->map2standard_s($_) }
			   ($p1, $p2);
		   Strassen::Util::strecke_s($pp1, $pp2);
	       }) : ()),
     ($v ? (-v => 1) : ()),
    );
print STDERR "done\n" if ($v);
while(my($p1,$v) = each %{$steigungsnetz->{Net}}) {
    while(my($p2,$steigung) = each %$v) {
	if ($steigung > 0) {
	    my $pos = $netz->{Net2Name}{$p1}{$p2};
	    if (!defined $pos) {
		$pos = $netz->{Net2Name}{$p2}{$p1};
	    }
	    if (!defined $pos) {
		warn "Unbekannt: $p1 => $p2, Steigung: $steigung\n";
	    } else {
		my $strasse = $str->get($pos)->[0];
		push @steigung, [$steigung, $strasse, $p1, $p2];
	    }
	}
    }
}

@steigung = sort { $b->[0] <=> $a->[0] } @steigung;

open(BBD, ">$o");
foreach (@steigung) {
    my $grade_percent = $_->[0]*100;
    my $strname = $_->[1];
    my @coords = @{$_}[2, 3];
#XXXprint BBD "@$_\n";next;
    if ($commentscompatible) {
	printf BBD "Steigung %.1f%% (%s)\tSt; %s %s\n",
	    $grade_percent, $strname, @coords;
	if ($gefaelle) {
	    printf BBD "Gefälle %.1f%% (%s)\tGf; %s %s\n",
		$grade_percent, $strname, @{$_}[3, 2];
	}
    } else {
	printf BBD "%.1f %%: %s\t%s %s %s\n", $grade_percent, $strname, grey($_->[0]), @coords;
    }
}
close BBD;

# XXX aus bbbike kopiert, generalisieren!
sub read_hoehe {
    %hoehe = ();
    my $h = new Strassen $i;

    $h->init;
    while(1) {
	my $ret = $h->next;
	last if !@{$ret->[1]};
	my $hoehe = $ret->[0];
	$hoehe{$ret->[1][0]} = $hoehe;
    }
}

sub grey {
    my $steigung = shift;
    my $val = $steigung > $steigung_schwelle ? 255 : $steigung/$steigung_schwelle*255;
    sprintf("#%02x%02x%02x", (255-$val)x3);
}

__END__
