#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: replay_accesslog,v 1.3 2007/03/31 20:06:55 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2007 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use File::ReadBackwards;
use LWP::UserAgent;
use Time::HiRes qw(gettimeofday tv_interval);

my $ua = LWP::UserAgent->new;

my $accesslog = "$ENV{HOME}/www/log/radzeit.de-access_log";

tie *BW, 'File::ReadBackwards', $accesslog
    or die $!;
while(<BW>) {
    my $logentry = parse_accesslog($_);
    next if $logentry->{file} !~ m{^/cgi-bin/bbbike.cgi};
    next if $logentry->{file} =~ m{coordssession=\d};
    #next if $logentry->{code} !~ m{^2};
    next if $logentry->{rtype} ne 'GET';
    $ua->agent($logentry->{agent} . " (BBBike-Test/1.0 replay_accesslog)");
    print STDERR "$logentry->{duration}s " . substr($logentry->{file},0,70) ."...\n";
    my $url = "http://radzeit$logentry->{file}";

    my $t0 = [gettimeofday];
    my $resp = $ua->get($url);
    my $elapsed = tv_interval($t0);
    if ($resp->is_success) {
	printf STDERR "  %.1fs OK\n", $elapsed;
    } else {
	print STDERR "  " . $resp->status_line . "\n";
    }
}

# Taken from Parse::AccessLogEntry and changed
sub parse_accesslog {
    my $Line=shift;
    my $Ref;
    my $Rest;
    my $R2;
    while ($Line =~ s{^(unknown|127\.0\.0\.1|192\.168\.\d+\.\d+|10\.\d+\.\d+\.\d+),\s+}{}) { } # hmmm, strip proxies?
    ($Ref->{host},$Ref->{user},$Ref->{date},$Rest)= $Line=~m,^([^\s]+)\s+-\s+([^ ]+)\s+\[(.*?)\]\s+(.*),;
    my @Dsplit=split(/\s+/,$Ref->{date});
    $Ref->{diffgmt}=$Dsplit[1];
    my @Ds2=split(/\:/,$Dsplit[0],2);
    $Ref->{date}=$Ds2[0];
    $Ref->{time}=$Ds2[1];
    if ($Rest) {
	($Ref->{rtype},$Ref->{file},$Ref->{proto},$Ref->{code},$Ref->{bytes},$R2)=split(/\s/,$Rest,6);
	$Ref->{rtype}=~tr/\"//d;
	$Ref->{proto}=~tr/\"//d;
	if ($R2) {
	    my @Split=split(/\"/,$R2);
	    $Ref->{refer}=$Split[1];
	    $Ref->{agent}=$Split[3];
	    ($Ref->{duration})=$Split[4] =~ m{(\d+)};
	}
    }
    return $Ref;
}

__END__
