#!/usr/bin/perl
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2017,2018 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: srezic@cpan.org
# WWW:  http://bbbike.de
#

use FindBin;
use lib "$FindBin::RealBin/../lib";

use Doit;
use Doit::Log;
use Doit::Util qw(in_directory);

use Cwd qw(realpath);
use File::Temp qw(tempdir);
use Getopt::Long;
use Hash::Util qw(lock_keys);
use POSIX qw(strftime);

sub usage (;$) {
    die((defined $_[0] ? $_[0]."\n\n" : '') . <<EOF);
usage: $0 [--dry-run] gui | travis-ci [options]
EOF
}

sub usage_gui (;$) {
    die((defined $_[0] ? $_[0]."\n\n" : '') . <<EOF);
usage: $0 [--dry-run] gui [--dist debian|ubuntu|...] [--distver stretch|...] [--src local|github] [--env KEY=VAL ...] [--bbbike-args "..."] [--no-install-recommends] [--install-suggests] [--no-feature-pdf]

Note that --install-suggests would install quite a lot...
EOF
}

sub usage_travis_ci (;$) {
    die((defined $_[0] ? $_[0]."\n\n" : '') . <<EOF);
usage: $0 [--dry-run] travis-ci [--dist debian|ubuntu|...] [--distver stretch|...] [--src local|github] [--perl-ver X.Y.Z] [--env KEY=VAL ...] [--branch ...]
EOF
}

sub usage_build_deb (;$) {
    die((defined $_[0] ? $_[0]."\n\n" : '') . <<EOF);
usage: $0 [--dry-run] build-dev [--dist debian|ubuntu|...] [--distver stretch|...] [--distfile BBBike-X.YY.tar.gz] [--continue]
EOF
}

sub _dockerfile_frag_src ($) {
    my $optref = shift;
    my $dockerfile = '';

    # Get the source, either from github or local src
    my $branch_args = '';
    if ($optref->{branch}) {
	$branch_args = " --branch $optref->{branch}";
    }
    if ($optref->{src} eq 'github') {
	$dockerfile .= <<EOF;
RUN git clone --depth=1 https://github.com/eserte/bbbike.git$branch_args
EOF
    } elsif ($optref->{src} eq 'local') {
	$dockerfile .= <<EOF;
COPY bbbike /bbbike
EOF
    } else {
	usage "Invalid --src value '$optref->{src}', only 'github' and 'local' are known";
    }
    $dockerfile;
}

sub _add_invalidate_cmd ($) {
    my $dockerfile_ref = shift;
    $$dockerfile_ref .= <<"EOF";
# Just a hack to make sure that the following lines
# are executed at least once a day
RUN echo @{[ POSIX::strftime("%F", localtime) ]}
EOF
}

sub gui {
    my($doit, %opt) = @_;
    lock_keys %opt;

    my $add_apt_args = "";
    if (!$opt{'install-recommends'}) {
	$add_apt_args .= " --no-install-recommends";
    }
    if ($opt{'install-suggests'}) {
	$add_apt_args .= " --install-suggests";
    }

    my $dockerfile = <<EOF;
FROM $opt{dist}:$opt{distver}
EOF
    _add_invalidate_cmd(\$dockerfile) if $opt{'invalidate-apt'};
    $dockerfile .= <<EOF;
RUN apt-get update
EOF
    if ($opt{src} =~ m{^(github|local)$}) {
	my @packages = qw(perl-tk);
	if ($opt{'feature-pdf'}) {
	    push @packages, qw(libcairo-perl libpango-perl);
	}
	if ($opt{src} eq 'github') {
	    push @packages, 'git';
	}
	$dockerfile .= <<"EOF";
RUN apt-get install -qqy @packages
EOF
	if ($opt{src} eq 'github') {
	    $dockerfile .= <<"EOF";
CMD git clone --depth=1 git://github.com/eserte/bbbike.git && bbbike/bbbike $opt{'bbbike-args'}
EOF
	} elsif ($opt{src} eq 'local') {
	    $dockerfile .= <<"EOF";
CMD /bbbike/bbbike $opt{'bbbike-args'}
EOF
	}
    } elsif ($opt{src} =~ m{\.deb$}) {
	require File::Basename;
	my $base_src = File::Basename::basename($opt{src});
	$dockerfile .= <<EOF;
COPY $base_src /tmp
COPY install-deb /tmp
WORKDIR /tmp
RUN sh install-deb $add_apt_args ./$base_src
CMD bbbike $opt{'bbbike-args'}
EOF
    } else {
	usage "Invalid --src value '$opt{src}', only 'github', 'local' or a path to a .deb are possible";
    }

    # Need to start docker-machine early on MacOSX, and do also some pre-checking.
    local %ENV = %ENV; # actually needed only for darwin
    if ($^O eq 'darwin') {
	# If you choose to name your docker-mmachine other than
	# "default", then you have to set the --docker-machine=...
	# option to this name.
	#
	# Some references:
	# - https://stackoverflow.com/questions/32174560/port-forwarding-in-docker-machine
	# - https://github.com/docker/for-mac/issues/483#issuecomment-293833781
	# - https://stackoverflow.com/a/43918461 (another solution using VNC, not tried yet)

	if (!$ENV{DISPLAY}) {
	    error "No DISPLAY environment variable --- maybe Xquartz has to be started?";
	}
	if (!-S $ENV{DISPLAY}) {
	    error "Content of $ENV{DISPLAY} should be path to X socket";
	}
	$doit->add_component('brew');
	$doit->brew_install_packages(qw(socat docker-machine));

	{
	    chomp(my $status = $doit->info_qx({quiet=>1}, 'docker-machine', 'status', $opt{'docker-machine'}));
	    my $docker_machine_found;
	    if ($status eq 'Running') {
		info "docker-machine '" . $opt{'docker-machine'} . "' already running";
		$docker_machine_found = 1;
	    }
	    if (!$docker_machine_found) {
		$doit->system('docker-machine', 'start', $opt{'docker-machine'});
	    }
	}
	for my $env_line (split /\n/, $doit->info_qx({quiet=>1}, 'docker-machine', 'env', $opt{'docker-machine'})) {
	    if ($env_line =~ m{^export\s+([^=]+)=(.*)$}) {
		my($key, $val) = ($1, $2);
		if ($val =~ m{^"(.*)"$}) {
		    $val = $1;
		}
		$doit->setenv($key, $val);
	    }
	}
    }

    my $docker_context_dir = tempdir("docker_context_XXXXXXXX", TMPDIR => 1, CLEANUP => 1);
    $doit->write_binary("$docker_context_dir/Dockerfile", $dockerfile);

    if ($opt{src} =~ m{\.deb$}) {
	$doit->copy($opt{src}, $docker_context_dir);
	$doit->copy("$FindBin::RealBin/../port/debian/helper/install-deb", $docker_context_dir);
    }

    my $tag = 'bbbike-gui-'.$opt{dist}.'-'.$opt{distver};
    in_directory {
	$doit->system(qw(docker build --tag), $tag, '.');
    } $docker_context_dir;

    my $XSOCK = '/tmp/.X11-unix';
    my $XAUTH = '/tmp/.docker.xauth';
    my @docker_run_args =
	(
	 # SYS_PTRACE is required for strace --- see
	 # http://blog.johngoulah.com/2016/03/running-strace-in-docker/
	 $opt{debug} ? ('--cap-add', 'SYS_PTRACE') : (),
	);
    if ($^O eq 'darwin') {
	my $scope_cleanups = Doit::ScopeCleanups->new;

	my $socat_port = 6098; # should be >= 6000
	my $display = ':' . ($socat_port-6000);
	my $socat_pid = fork;
	error "Can't fork: $!" if !defined $socat_pid;
	if ($socat_pid == 0) {
	    (my $escaped_DISPLAY = $ENV{DISPLAY}) =~ s{:}{\\:}g;
	    my @cmd = ('socat', 'TCP-LISTEN:'.$socat_port.',reuseaddr,fork', "UNIX-CLIENT:$escaped_DISPLAY");
	    info "Running @cmd";
	    exec @cmd;
	    die "Can't run <@cmd>: $!";
	}
	$scope_cleanups->add_scope_cleanup(sub { info "Killing socat process $socat_pid"; kill KILL => $socat_pid });

	my $ssh_port_fwd_pid = fork;
	error "Can't fork: $!" if !defined $ssh_port_fwd_pid;
	if ($ssh_port_fwd_pid == 0) {
	    my @cmd = ('docker-machine', 'ssh', $opt{'docker-machine'}, '-R', "$socat_port:localhost:$socat_port", '-N');
	    info "Running @cmd";
	    exec @cmd;
	    die "Can't run <@cmd>: $!";
	}
	$scope_cleanups->add_scope_cleanup(sub { info "Killing ssh process $ssh_port_fwd_pid"; kill KILL => $ssh_port_fwd_pid });

	# Race condition! Hopefully socat & ssh are faster than the following docker command!
	$doit->system('docker', 'run', '-ti',
		      @docker_run_args,
		      '--network=host',
		      '-p', $socat_port,
		      ($opt{src} eq 'local' ? ('-v', "$FindBin::RealBin/..:/bbbike:ro") : ()),
		      '-e', "DISPLAY=$display",
		      $tag,
		     );
    } else {
	$doit->run(['xauth', 'nlist', $ENV{DISPLAY}], '|', ['sed', '-e', 's/^..../ffff/'], '|', ['xauth', '-f', $XAUTH, 'nmerge', '-']);
	$doit->run(['docker', 'run', '-ti',
		    @docker_run_args,
		    '-v', "$XSOCK:$XSOCK", '-v', "$XAUTH:$XAUTH",
		    ($opt{src} eq 'local' ? ('-v', "$FindBin::RealBin/..:/bbbike:ro") : ()),
		    '-e', "XAUTHORITY=$XAUTH", '-e', "DISPLAY=$ENV{DISPLAY}", $tag,
		   ]);
    }
}

sub travis_ci {
    my($doit, %opt) = @_;
    lock_keys %opt;

    require Tie::IxHash;
    tie my %default_env, 'Tie::IxHash',
	(
	 # build config
	 USE_MODPERL                => 1,
	 USE_SYSTEM_PERL            => 1,
	 # init_env_vars() is ineffective in this setup, so set it here
	 BBBIKE_LONG_TESTS          => 1,
	 BBBIKE_TEST_SKIP_MAPSERVER => 1,
	 BBBIKE_TEST_GUI            => 0,
	 BBBIKE_TEST_WITH_SELENIUM  => 0,
	 PERL_CPANM_OPT             => "--mirror https://cpan.metacpan.org --mirror http://cpan.cpantesters.org",
	 CPAN_INSTALLER             => "cpanm",
	);

    my $bbbike_rootdir = realpath("$FindBin::RealBin/..");
    my $docker_context_dir = tempdir("docker_context_XXXXXXXX", TMPDIR => 1, CLEANUP => 1);

    ## Build the Dockerfile
    my $dockerfile = <<EOF;
FROM $opt{dist}:$opt{distver}

# travis defaults
ENV DEBIAN_FRONTEND noninteractive

EOF

    # repository for agrep
    if ($opt{dist} eq 'debian') {
	$dockerfile .= <<EOF;
RUN echo "deb http://ftp.de.debian.org/debian/ $opt{distver} non-free" > /etc/apt/sources.list.d/$opt{distver}-non-free.list
EOF
    } elsif ($opt{dist} eq 'ubuntu') {
	if ($opt{distver} =~ m{^(precise|trusty)$}) {
	    $dockerfile .= <<EOF;
RUN echo "deb http://archive.ubuntu.com/ubuntu $opt{distver} multiverse" > /etc/apt/sources.list.d/$opt{distver}-multiverse.list
EOF
	} else {
	    # since Ubuntu 16.04 multiverse is enabled by default
	}
    } else {
	die "Unsupported dist $opt{dist}";
    }

    # libmysqlclient-dev package name
    my $libmysqlclient_dev;
    if (
	($opt{dist} eq 'debian' && $opt{distver} =~ m{^(lenny|squeeze|wheezy|jessie)$}) ||
	($opt{dist} eq 'ubuntu' && $opt{distver} =~ m{^(precise|trusty|xenial)$})
       ) {
	$libmysqlclient_dev = 'libmysqlclient-dev';
    } else { # stretch and newer
	$libmysqlclient_dev = 'default-libmysqlclient-dev';
    }

    if ($opt{distver} eq 'precise') {
	# http/1.1 pipelining used, but mydebs.bbbike.org cannot
	# do it (response: 400 Bad Request). Workaround from
	# http://bnpcs.blogspot.de/2010/11/disable-http-pipelining-in-ubuntu.html
	$dockerfile .= <<EOF;
RUN echo 'Acquire::http::Pipeline-Depth "0";' >> /etc/apt/apt.conf.d/00no-pipeline
EOF
    }

    # basic packages
    _add_invalidate_cmd(\$dockerfile) if $opt{'invalidate-apt'};
    $dockerfile .= <<EOF;
RUN apt-get update -qq
RUN apt-get install -qqy git cpanminus libssl-dev $libmysqlclient_dev wget
EOF
    if ($opt{distver} eq 'precise' || $opt{distver} eq 'xenial' || $opt{distver} eq 'bionic' || $opt{dist} eq 'debian') {
	# Lacking packages in precise and bionic (18.04) (and debian/stretch, lsb-release at least)
	$dockerfile .= <<EOF;
RUN apt-get install -qqy lsb-release sudo make
EOF
    }

    if ($opt{'perl-ver'}) {
	(my $short_perl_ver = $opt{'perl-ver'}) =~ s{\.\d+$}{};
	# Probably travis has only perls for ubuntu trusty and precise
	my $distnumver = { ubuntu => { trusty  => '14.04',
				       precuse => '12.04',
				     } }->{$opt{dist}}->{$opt{distver}};
	if (!$distnumver) {
	    error "No support for --perl-ver and $opt{dist}:$opt{distver}";
	}
	$dockerfile .= <<EOF;
RUN apt-get install -qqy bzip2
RUN wget https://s3.amazonaws.com/travis-perl-archives/binaries/$opt{dist}/$distnumver/x86_64/perl-$short_perl_ver.tar.bz2
RUN tar xf perl-$short_perl_ver.tar.bz2
ENV PATH=/home/travis/perl5/perlbrew/bin:/home/travis/perl5/perlbrew/perls/$opt{'perl-ver'}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
EOF
	$default_env{USE_SYSTEM_PERL} = '';
    } else {
	# install dummy perlbrew, so at least "perlbrew off" works
	$dockerfile .= <<EOF;
RUN echo "#!/bin/sh" > /usr/bin/perlbrew
RUN chmod 755 /usr/bin/perlbrew
EOF
    }
    $dockerfile .= <<EOF;
COPY bbbike/port/travis-ci/travis-functions.sh /
RUN cat /travis-functions.sh >> ~/.bash_profile
EOF

    # apply default environment, possibly changed by --env options
    my %changed_env; # used later for git-test-note feature list
    for my $key (keys %default_env) {
	my $val;
	if (exists $opt{env}->{$key}) {
	    $val = delete $opt{env}->{$key};
	    $changed_env{$key} = $val;
	} else {
	    $val = $default_env{$key};
	}
	$dockerfile .= <<EOF;
ENV $key "$val"
EOF
    }

    $dockerfile .= _dockerfile_frag_src(\%opt);

    # Emulate .travis.yml
    $dockerfile .= <<EOF;
ENV TRAVIS_BUILD_DIR /bbbike
WORKDIR bbbike

# "-e" -> init_travis must not be run anymore
# init_env_vars does not work in a Dockerbuild environment. Set some env vars manually
ENV CODENAME $opt{distver}

RUN /bin/bash --login -e -c "wrapper init_perl"
RUN /bin/bash --login -e -c "wrapper init_apt"
RUN /bin/bash --login -e -c "wrapper install_non_perl_dependencies"
RUN /bin/bash --login -e -c "wrapper install_perl_testonly_dependencies"
RUN /bin/bash --login -e -c "wrapper install_perl_58_dependencies"
RUN /bin/bash --login -e -c "wrapper install_cpan_hacks"
RUN /bin/bash --login -e -c "wrapper install_webserver_dependencies"
RUN /bin/bash --login -e -c "wrapper install_selenium"
RUN /bin/bash --login -e -c "wrapper install_perl_dependencies"
RUN /bin/bash --login -e -c "wrapper init_cgi_config"
RUN /bin/bash --login -e -c "wrapper fix_cgis"
RUN /bin/bash --login -e -c "wrapper init_webserver_config"

ENV TRAVIS true
EOF

    # Apply the rest of --env
    for my $key (sort keys %{ $opt{env} }) {
	$dockerfile .= <<EOF;
ENV $key $opt{env}->{$key}
EOF
    }

    # Dependencies for data building
    if ($opt{'with-data-build'}) {
	$dockerfile .= <<EOF
RUN apt-get install -qqy \\
    libdata-compare-perl \\
    libdatetime-event-easter-perl \\
    libdatetime-event-recurrence-perl \\
    libkwalify-perl \\
    libyaml-syck-perl
EOF
    }

    # Start all services and finally run the test suite
    $dockerfile .= qq{CMD /bin/bash --login -e -c "wrapper start_webserver && wrapper start_xserver && wrapper init_webserver_environment && wrapper start_selenium && wrapper init_data && perl Makefile.PL && make distcheck && };
    if (!$opt{'with-data-build'}) {
	$dockerfile .= qq{BBBIKE_TEST_FOR_LIVE=1 HARNESS_TIMER=1 make test HARNESS_OPTIONS=j$opt{jobs}};
    } else {
	# ... except in with-data-build mode; actual test will run later (see below)
	$dockerfile .= qq{while true; do sleep 3600; done};
    }
    $dockerfile .= qq{"\n};
    # "make test" should be last command --- check scripts may look at the end of the generated log
    ## End of Dockerfile building

    $doit->write_binary("$docker_context_dir/Dockerfile", $dockerfile);
    if ($opt{src} eq 'local') {
	$doit->mkdir("$docker_context_dir/bbbike");
	in_directory {
	    $doit->run(
		       ['git', 'ls-files', '-z'], '|',
		       ['rsync', '-a', '--files-from=-', '-0', '--no-dirs', '--whole-file', '.', "$docker_context_dir/bbbike"],
		      );
	} $bbbike_rootdir;
    } else {
	$doit->make_path("$docker_context_dir/bbbike/port/travis-ci");
	$doit->copy("$bbbike_rootdir/port/travis-ci/travis-functions.sh", "$docker_context_dir/bbbike/port/travis-ci/");
	# mtime has to be preserved, otherwise older docker (<1.8?)
	# will take mtime into account when calculating cache checksums
	# see https://github.com/moby/moby/pull/12031
	my $mtime = (stat("$bbbike_rootdir/port/travis-ci/travis-functions.sh"))[9];
	$doit->utime($mtime, $mtime, "$docker_context_dir/bbbike/port/travis-ci/travis-functions.sh");
    }

    in_directory {
	my $scope_cleanups = Doit::ScopeCleanups->new;
	my $tag = 'bbbike-travis-ci-' . $opt{dist} . '-' . $opt{distver};
	$doit->system(qw(docker build --tag), $tag, ($opt{'no-cache'} ? '--no-cache' : ()), qw(.));

	my @errors;
	if (!$opt{'with-data-build'}) {
	    eval {
		$doit->system(qw(docker run), $tag);
	    };
	    if ($@) {
		push @errors, "docker run failed: $@";
	    }
	} else {
	    my $container_name = $tag.'-running';
	    eval { $doit->system(qw(docker rm), $container_name) };
	    $doit->system(qw(docker run -d), '--name', $container_name, $tag);

	    # in with-data-build mode two test suites run: code and data test
	    $scope_cleanups->add_scope_cleanup(sub { $doit->system(qw(docker kill), $container_name) });
	    my @errors;

	    # XXX hmmm --- probably it would be a good idea to wait until the initial CMD was already done
	    eval {
		$doit->system(qw(docker exec), $container_name, 'sh', '-c', 'cd data && fmake all slow-checks really-slow-checks');
	    };
	    if ($@) {
		push @errors, "data build errored: $@";
	    }

	    eval {
		$doit->system(qw(docker exec), $container_name, qw(env BBBIKE_TEST_FOR_LIVE=1 HARNESS_TIMER=1 make test), "HARNESS_OPTIONS=j$opt{jobs}")
	    };
	    if ($@) {
		push @errors, "code test errored: $@";
	    }
	}

	{
	    my @test_note_cmd;
	    push @test_note_cmd, @errors ? '--fail' : '--pass';
	    push @test_note_cmd, '--docker';
	    push @test_note_cmd, '--spec', $opt{dist}.':'.$opt{distver};
	    for my $key (sort keys %changed_env) {
		push @test_note_cmd, '--feature', $key.'='.$changed_env{$key};
	    }
	    if ($opt{'perl-ver'}) {
		push @test_note_cmd, '--feature', 'perl=' . $opt{'perl-ver'};
	    }
	    info "Use the following as test note command:\n\tgit-test-note @test_note_cmd\n";
	}

	if (@errors) {
	    error "Tests failed:\n" . join("\n", @errors);
	}
    } $docker_context_dir;
}

sub build_deb {
    my($doit, %opt) = @_;
    lock_keys %opt;

    require File::Basename;

    my($distfile, $distvname);
    if ($opt{distfile}) {
	$distfile = $opt{distfile};
	($distvname = File::Basename::basename($distfile)) =~ s{.tar.gz$}{};
    } else {
	require BBBikeBuildUtil;
	my $bsdmake = BBBikeBuildUtil::get_pmake(fallback => 0);

	if (!$opt{continue} || !-e "Makefile") {
	    $doit->system($^X, "Makefile.PL");
	}
	chomp($distvname = $doit->info_qx($bsdmake, "-VDISTVNAME"));
	$distfile = "$distvname.tar.gz";
	if (!$opt{continue} || !-s $distfile) {
	    $doit->system($bsdmake, "dist");
	}
    }
    if (!-s $distfile) {
	error "Expected distfile $distfile is missing";
    }
    my $distbasefile = File::Basename::basename($distfile);

    # Look into tarball for Debian version
    my $dist_tempdir = tempdir("bbbike_deb_XXXXXXXX", TMPDIR => 1, CLEANUP => 1);
    $doit->system("tar", "-C", $dist_tempdir, "-xf", $distfile, "$distvname/BBBikeVar.pm");
    require Safe;
    my $safe = Safe->new;
    $safe->rdo("$dist_tempdir/$distvname/BBBikeVar.pm");
    my $stable_version = $safe->reval('$BBBike::STABLE_VERSION');
    $stable_version or error "Can't get STABLE_VERSION";
    my $debian_version = $safe->reval('$BBBike::DEBIAN_VERSION');
    $debian_version or error "Can't get DEBIAN_VERSION";

    # Prepare docker environment
    my $docker_context_dir = tempdir("docker_context_XXXXXXXX", TMPDIR => 1, CLEANUP => 1);
    $doit->copy($distfile, $docker_context_dir);
    my $origfile = "bbbike_${stable_version}.orig.tar.gz";
    $doit->copy("$docker_context_dir/$distbasefile", "$docker_context_dir/$origfile"); # XXX why?
    $doit->system('rsync', '-a', 'port/debian/', "$docker_context_dir/debian/");
    my $debfile = "bbbike_${debian_version}_all.deb";

    my $dockerfile = <<EOF;
FROM $opt{dist}:$opt{distver}
EOF
    _add_invalidate_cmd(\$dockerfile) if $opt{'invalidate-apt'};
    $dockerfile .= <<EOF;
RUN apt-get update
RUN apt-get install -qqy dpkg-dev lintian rsync debhelper
RUN mkdir /bbbike
COPY $distbasefile /bbbike
COPY $origfile /bbbike
COPY /debian/ /bbbike/debian/
WORKDIR /bbbike
RUN tar xf $distbasefile && cd $distvname && rsync -a ../debian/ debian/ && dpkg-buildpackage -us -uc -rfakeroot -D
RUN lintian $debfile
CMD /bbbike/debian/helper/install-deb ./$debfile && cp -f $debfile /hosttmp
EOF
    $doit->write_binary("$docker_context_dir/Dockerfile", $dockerfile);
    in_directory {
	my $tag = "bbbike-deb-$opt{dist}-$opt{distver}";
	$doit->system("docker", "build", "--tag", $tag, ".");
	$doit->system("docker", "run", "-v", "/tmp:/hosttmp", $tag);
	if ($^O eq 'darwin') { # XXX actually for any system using docker-machine
	    $doit->system("docker-machine", "scp", "default:/tmp/$debfile", "/tmp");
	}
	$doit->system("ls", "-al", "/tmp/$debfile");
    } $docker_context_dir;
}

return 1 if caller;

sub _check_distver ($) {
    my $distver = shift;
    if ($distver =~ m{^\d+}) {
	die "Use symbolic --distver (i.e. bionic instead of 18.04)\n";
    }
}

my $doit = Doit->init;

my $subcmd = shift
    or usage "Subcmd is missing.";

if ($subcmd =~ m{^(gui|perl[-_]?tk)$}) {
    my %opt = (
	       dist    => 'debian',
	       distver => 'latest',
	       src     => 'local',
	       debug   => 0,
	       'docker-machine' => 'default',
	       'bbbike-args' => '',
	       'install-recommends' => 1,
	       'install-suggests' => 0,
	       'feature-pdf' => 1,
	       'invalidate-apt' => 0,
	      );
    GetOptions(\%opt,
	       "dist=s",
	       "distver|distversion=s",
	       "src=s",
	       'debug!',
	       'docker-machine=s',
	       'bbbike-args=s',
	       'install-recommends!',
	       'install-suggests!',
	       'feature-pdf!',
	       'invalidate-apt!',
	      )
	or usage_gui;
    gui($doit, %opt);
} elsif ($subcmd eq 'travis-ci' || $subcmd eq 'test') {
    my %opt = (
	       jobs    => 1,
	       dist    => 'ubuntu',
	       distver => 'trusty',
	       src     => 'github',
	       branch  => undef,
	       env     => {},
	       'with-data-build' => 0,
	       'no-cache' => 0,
	       'invalidate-apt' => 0,
	       'perl-ver' => undef,
	      );
    GetOptions(\%opt,
	       "jobs|j=i",
	       "dist=s",
	       "distver|distversion=s",
	       "src=s",
	       'branch=s',
	       'env=s%',
	       "with-data-build!",
	       'no-cache',
	       'invalidate-apt!',
	       'perl-ver=s',
	      )
	or usage_travis_ci;
    _check_distver $opt{distver};
    travis_ci($doit, %opt);
} elsif ($subcmd eq 'build-deb') {
    my %opt = (
	       dist    => 'debian',
	       distver => 'latest',
	       distfile => undef,
	       continue => 0,
	       'invalidate-apt' => 0,
	      );
    GetOptions(\%opt,
	       "dist=s",
	       "distver|distversion=s",
	       "distfile=s",
	       "continue!",
	       'invalidate-apt!',
	      )
	or usage_build_deb;
    build_deb($doit, %opt);
} else {
    usage "Unknown subcmd '$subcmd'";
}
__END__

=head1 NAME

docker-bbbike - run bbbike tasks in docker

=head1 SYNOPSIS

    ./miscsrc/docker-bbbike [options]

=head1 DESCRIPTION

C<docker-bbbike> may run different tasks in a docker environment.

=head2 GUI

Run GUI application in a docker image, forwarding display to the real
X11 display:

    ./miscsrc/docker-bbbike gui

The same, but specify OS + version (instead of default debian:latest):

    ./miscsrc/docker-bbbike gui --dist ubuntu --distver 16.04

To start bbbike from an existing .deb package, use

    ./miscsrc/docker-bbbike gui --src /path/to/bbbike.deb

Supply bbbike options:

    ./miscsrc/docker-bbbike gui --bbbike-args="-lazy -advanced"

=head2 TESTS (like in travis-ci)

Run test suite like on travis-ci, with settings C<USE_MODPERL=1> and
C<USE_SYSTEM_PERL=1>:

    ./miscsrc/docker-bbbike travis-ci --jobs 4

The same, but specify additional environment variables:

    ./miscsrc/docker-bbbike travis-ci --jobs 4 --env BBBIKE_TEST_GUI=1

Use another Ubuntu version (default is trusty):

    ./miscsrc/docker-bbbike travis-ci --jobs 4 --distver precise

Including Mapserver tests:

    ./miscsrc/docker-bbbike travis-ci --jobs 4 --env BBBIKE_TEST_SKIP_MAPSERVER=0

Use another perl version, and don't use mod_perl, but starman instead:

    ./miscsrc/docker-bbbike travis-ci --jobs 4 --env BBBIKE_TEST_SKIP_MODPERL=1 --env USE_MODPERL=0 --perl-ver 5.20.3

Don't use the current source from github, rather copy the current
source directory into the docker container:

    ./miscsrc/docker-bbbike travis-ci --jobs 4 --src local

A crontab entry may look like this:

    48 0 * * *      mkdir -p $HOME/log/docker-bbbike-debian-jessie && cd $HOME/cvrsnica/src/bbbike && ./miscsrc/docker-bbbike test --dist debian --distver jessie --src local --env BBBIKE_TEST_SKIP_MAPSERVER=0 > $HOME/log/docker-bbbike-debian-jessie/$(date +\%FT\%T.log) 2>&1

=head2 DEB PACKAGE BUILD

Create a debian package for the current source:

    ./miscsrc/docker-bbbike build-deb

The resulting .deb file will be in F</tmp>.

To continue a partially completed run, use

    ./miscsrc/docker-bbbike build-deb --continue

This would especially skip the creation of the intermediate tarball.

The options C<--dist> and C<--distver> may be used to use another
Debian/Ubuntu/... version. The default is to use the latest Debian.

Create a debian package for an existing tarball:

    ./miscsrc/docker-bbbike build-deb --distfile BBBike-X.YY.tar.gz

=head1 SEE ALSO

L<docker(1)>.

=cut
