#!/usr/bin/perl
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2017 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: srezic@cpan.org
# WWW:  http://bbbike.de
#

use FindBin;
use lib "$FindBin::RealBin/../lib";

use Doit;
use Doit::Log;
use Doit::Util qw(in_directory);

use Cwd qw(realpath);
use File::Temp qw(tempdir);
use Getopt::Long;
use Hash::Util qw(lock_keys);

sub usage (;$) {
    die((defined $_[0] ? $_[0]."\n\n" : '') . <<EOF);
usage: $0 [--dry-run] gui [--dist debian|ubuntu|...] [--distver stretch|...] [--src local|github] [--env KEY=VAL ...]
EOF
}

sub gui {
    my($doit, %opt) = @_;
    lock_keys %opt;

    my $dockerfile = <<EOF;
FROM $opt{dist}:$opt{distver}
RUN apt-get update
RUN apt-get install -qqy perl-tk
EOF
    if ($opt{src} eq 'github') {
	$dockerfile .= <<EOF;
RUN apt-get install -qqy git
CMD git clone --depth=1 git://github.com/eserte/bbbike.git && bbbike/bbbike
EOF
    } elsif ($opt{src} eq 'local') {
	$dockerfile .= <<EOF;
CMD /bbbike/bbbike
EOF
    } else {
	usage "Invalid --src value '$opt{src}', only 'github' and 'local' are known";
    }

    # Need to start docker-machine early on MacOSX, and do also some pre-checking.
    local %ENV = %ENV; # actually needed only for darwin
    if ($^O eq 'darwin') {
	# If you choose to name your docker-mmachine other than
	# "default", then you have to set the --docker-machine=...
	# option to this name.
	#
	# Some references:
	# - https://stackoverflow.com/questions/32174560/port-forwarding-in-docker-machine
	# - https://github.com/docker/for-mac/issues/483#issuecomment-293833781
	# - https://stackoverflow.com/a/43918461 (another solution using VNC, not tried yet)

	if (!$ENV{DISPLAY}) {
	    error "No DISPLAY environment variable --- maybe Xquartz has to be started?";
	}
	if (!-S $ENV{DISPLAY}) {
	    error "Content of $ENV{DISPLAY} should be path to X socket";
	}
	$doit->add_component('brew');
	$doit->brew_install_packages(qw(socat docker-machine));

	{
	    my $docker_machine_found;
	    for my $docker_machine (split /\n/, eval { $doit->info_qx({quiet=>1}, 'docker-machine', 'active') }) {
		if ($docker_machine eq $opt{'docker-machine'}) {
		    info "Matching docker-machine '$docker_machine' found";
		    $docker_machine_found = 1;
		    last;
		}
	    }
	    if (!$docker_machine_found) {
		$doit->system('docker-machine', 'start', $opt{'docker-machine'});
	    }
	}
	for my $env_line (split /\n/, $doit->info_qx({quiet=>1}, 'docker-machine', 'env', $opt{'docker-machine'})) {
	    if ($env_line =~ m{^export\s+([^=]+)=(.*)$}) {
		my($key, $val) = ($1, $2);
		if ($val =~ m{^"(.*)"$}) {
		    $val = $1;
		}
		$doit->setenv($key, $val);
	    }
	}
    }

    my $tag = 'bbbike-gui-'.$opt{dist}.'-'.$opt{distver};
    $doit->run([qw(docker build --tag), $tag, '-'], '<', \$dockerfile);

    my $XSOCK = '/tmp/.X11-unix';
    my $XAUTH = '/tmp/.docker.xauth';
    my @docker_run_args =
	(
	 # SYS_PTRACE is required for strace --- see
	 # http://blog.johngoulah.com/2016/03/running-strace-in-docker/
	 $opt{debug} ? ('--cap-add', 'SYS_PTRACE') : (),
	);
    if ($^O eq 'darwin') {
	my $scope_cleanups = Doit::ScopeCleanups->new;

	my $socat_port = 6098; # should be >= 6000
	my $display = ':' . ($socat_port-6000);
	my $socat_pid = fork;
	error "Can't fork: $!" if !defined $socat_pid;
	if ($socat_pid == 0) {
	    (my $escaped_DISPLAY = $ENV{DISPLAY}) =~ s{:}{\\:}g;
	    my @cmd = ('socat', 'TCP-LISTEN:'.$socat_port.',reuseaddr,fork', "UNIX-CLIENT:$escaped_DISPLAY");
	    info "Running @cmd";
	    exec @cmd;
	    die "Can't run <@cmd>: $!";
	}
	$scope_cleanups->add_scope_cleanup(sub { info "Killing socat process $socat_pid"; kill KILL => $socat_pid });

	my $ssh_port_fwd_pid = fork;
	error "Can't fork: $!" if !defined $ssh_port_fwd_pid;
	if ($ssh_port_fwd_pid == 0) {
	    my @cmd = ('docker-machine', 'ssh', $opt{'docker-machine'}, '-R', "$socat_port:localhost:$socat_port", '-N');
	    info "Running @cmd";
	    exec @cmd;
	    die "Can't run <@cmd>: $!";
	}
	$scope_cleanups->add_scope_cleanup(sub { info "Killing ssh process $ssh_port_fwd_pid"; kill KILL => $ssh_port_fwd_pid });

	# Race condition! Hopefully socat & ssh are faster than the following docker command!
	$doit->run(['docker', 'run', '-ti',
		    @docker_run_args,
		    '--network=host',
		    '-p', $socat_port,
		    ($opt{src} eq 'local' ? ('-v', "$FindBin::RealBin/..:/bbbike:ro") : ()),
		    '-e', "DISPLAY=$display",
		    $tag,
		   ]);
    } else {
	$doit->run(['xauth', 'nlist', $ENV{DISPLAY}], '|', ['sed', '-e', 's/^..../ffff/'], '|', ['xauth', '-f', $XAUTH, 'nmerge', '-']);
	$doit->run(['docker', 'run', '-ti',
		    @docker_run_args,
		    '-v', "$XSOCK:$XSOCK", '-v', "$XAUTH:$XAUTH",
		    ($opt{src} eq 'local' ? ('-v', "$FindBin::RealBin/..:/bbbike:ro") : ()),
		    '-e', "XAUTHORITY=$XAUTH", '-e', "DISPLAY=$ENV{DISPLAY}", $tag,
		   ]);
    }
}

sub travis_ci {
    my($doit, %opt) = @_;
    lock_keys %opt;
    my $bbbike_rootdir = realpath("$FindBin::RealBin/..");
    my $docker_context_dir = tempdir("docker_context_XXXXXXXX", TMPDIR => 1, CLEANUP => 1);
    my $dockerfile = <<EOF;
FROM ubuntu:$opt{distver}

# travis defaults
ENV DEBIAN_FRONTEND noninteractive

# for agrep
RUN echo "deb http://archive.ubuntu.com/ubuntu $opt{distver} multiverse" > /etc/apt/sources.list.d/$opt{distver}-multiverse.list

RUN apt-get update -qq
RUN apt-get install -qq git cpanminus libssl-dev libmysqlclient-dev wget
EOF
    if ($opt{distver} eq 'precise') {
	# Lacking packages in precise
	$dockerfile .= <<EOF;
RUN apt-get install -qq lsb-release sudo
EOF
    }
    $dockerfile .= <<EOF;
# install dummy perlbrew, so at least "perlbrew off" works
RUN echo "#!/bin/sh" > /usr/bin/perlbrew
RUN chmod 755 /usr/bin/perlbrew

COPY travis-functions.sh /
RUN cat /travis-functions.sh >> ~/.bash_profile

# build config
ENV USE_MODPERL 1
ENV USE_SYSTEM_PERL=1

# replaces init_env_vars
ENV BBBIKE_LONG_TESTS 1
ENV BBBIKE_TEST_SKIP_MAPSERVER 1
ENV PERL_CPANM_OPT "--mirror https://cpan.metacpan.org --mirror http://cpan.cpantesters.org"
ENV CPAN_INSTALLER "cpanm"

# "-e" -> init_travis must not be run anymore
RUN /bin/bash --login -e -c "wrapper init_env_vars"
RUN /bin/bash --login -e -c "wrapper init_perl"
RUN /bin/bash --login -e -c "wrapper init_apt"
RUN /bin/bash --login -e -c "wrapper install_non_perl_dependencies"
RUN /bin/bash --login -e -c "wrapper install_perl_testonly_dependencies"
RUN /bin/bash --login -e -c "wrapper install_perl_58_dependencies"
RUN /bin/bash --login -e -c "wrapper install_cpan_hacks"
RUN /bin/bash --login -e -c "wrapper install_webserver_dependencies"
EOF
    if ($opt{distver} eq 'precise') {
	# http/1.1 pipelining used, but mydebs.bbbike.org cannot
	# do it (response: 400 Bad Request). Workaround from
	# http://bnpcs.blogspot.de/2010/11/disable-http-pipelining-in-ubuntu.html
	$dockerfile .= <<EOF;
RUN echo 'Acquire::http::Pipeline-Depth "0";' >> /etc/apt/apt.conf.d/00no-pipeline
EOF
    }
    $dockerfile .= <<EOF;
RUN /bin/bash --login -e -c "wrapper install_perl_dependencies"

RUN git clone --depth=1 https://github.com/eserte/bbbike.git
WORKDIR bbbike
ENV TRAVIS_BUILD_DIR /bbbike

RUN /bin/bash --login -e -c "wrapper init_cgi_config"
RUN /bin/bash --login -e -c "wrapper fix_cgis"
RUN /bin/bash --login -e -c "wrapper init_webserver_config"

ENV TRAVIS true
EOF
    for my $key (sort keys %{ $opt{env} }) {
	$dockerfile .= <<EOF;
ENV $key $opt{env}->{$key}
EOF
    }
    $dockerfile .= <<EOF;
CMD /bin/bash --login -e -c "wrapper start_webserver && wrapper start_xserver && wrapper init_webserver_environment && wrapper init_data && perl Makefile.PL && BBBIKE_TEST_FOR_LIVE=1 make test HARNESS_OPTIONS=j$opt{jobs}"
EOF
    $doit->write_binary("$docker_context_dir/Dockerfile", $dockerfile);
    $doit->copy("$bbbike_rootdir/port/travis-ci/travis-functions.sh", "$docker_context_dir/");
    # mtime has to be preserved, otherwise older docker (<1.8?)
    # will take mtime into account when calculating cache checksums
    # see https://github.com/moby/moby/pull/12031
    my $mtime = (stat("$bbbike_rootdir/port/travis-ci/travis-functions.sh"))[9];
    $doit->utime($mtime, $mtime, "$docker_context_dir/travis-functions.sh");

    in_directory {
	my $tag = 'bbbike-travis-ci-ubuntu-' . $opt{distver};
	$doit->run([qw(docker build --tag), $tag, qw(.)]);
	$doit->run(['docker', 'run', '-ti',
		    #'-v', "$bbbike_rootdir:/bbbike",
		    $tag,
		   ]);
    } $docker_context_dir;
}

return 1 if caller;

my $doit = Doit->init;

my $subcmd = shift
    or usage "Subcmd is missing.";

if ($subcmd =~ m{^(gui|perl[-_]?tk)$}) {
    my %opt = (
	       dist    => 'debian',
	       distver => 'latest',
	       src     => 'local',
	       debug   => 0,
	       'docker-machine' => 'default',
	      );
    GetOptions(\%opt,
	       "dist=s",
	       "distver|distversion=s",
	       "src=s",
	       'debug!',
	       'docker-machine=s',
	      )
	or usage;
    gui($doit, %opt);
} elsif ($subcmd eq 'travis-ci') {
    my %opt = (
	       jobs    => 1,
	       distver => 'trusty',
	       env     => {},
	      );
    GetOptions(\%opt,
	       "jobs|j=i",
	       "distver|distversion=s",
	       'env=s%'
	      )
	or usage;
    travis_ci($doit, %opt);
} else {
    usage "Unknown subcmd '$subcmd'";
}
__END__
