#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: bbd2polish,v 1.3 2005/07/02 22:28:52 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2005 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

# Convert from a set of bbd files into polish format for cgpsmapper

# See http://gps.chrisb.org/en/download.htm

# XXX make configurable everything

use strict;
use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../lib",
	);
use Strassen::Core;
use Karte::Polar;
use Karte::Standard;

my $id = 10000099; # XXX how to choose img id? is there a manual? or
                   # just increment?
my $name = "BBBike map";
my $out = "";
$out .= <<EOF;
[IMG ID]
ID=$id
Name=$name
;LBLcoding=6
LBLcoding=9
Codepage=1252
TreSize=3000
Elevation=m
;Levels=3
Levels=2
Level0=21
Level1=18
;Level2=15
Zoom0=1
Zoom1=2
;Zoom2=3
[END-IMG ID]

[DICTIONARY]
;Level0RGN10=111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[END-DICTIONARY]

EOF

my $s = Strassen->new("strassen");
$s->init;
while(1) {
    my $r = $s->next;
    my @c = @{ $r->[Strassen::COORDS] };
    last if !@c;

    @c = map {
	my($x,$y) = split /,/, $_;
	my($long, $lat) = $Karte::Polar::obj->trim_accuracy
	    ($Karte::Polar::obj->standard2map($x,$y)
	    );
	[$lat,$long];
    } @c;

    my $type = cat2type($r->[Strassen::CAT], "strassenXXX");

    if (@c == 1) {
	$out .= <<EOF;
[POI]
Type=$type
Label=$r->[Strassen::NAME]
Origin0=($c[0]->[0],$c[0]->[1])
;Origin1=($c[0]->[0],$c[0]->[1])
[END-POI]

EOF
    } else {
	$out .= <<EOF;
[POLYLINE]
Type=$type
Label=$r->[Strassen::NAME]
DirIndicator=0
EOF
	my $data0 = join(",", map {
	    "(" . $_->[0] . "," . $_->[1]  . ")"
	} @c) . "\n";
	$out .= "Data0=" . $data0;
	$out .= ";Data1=" . $data0;
	$out .= <<EOF;
[END-POLYLINE]

EOF
    }
}

print $out;

sub cat2type {
    my($cat, $file) = @_;
    my $cat_attrib;
    if ($cat =~ /^(.*?)::(.*)$/) {
	$cat = $1;
	$cat_attrib = $2;
    }
    # Cat;Cat is not handled yet, see DirIndicator above? XXX
    return 1 if $cat eq 'B' || $cat eq 'HH'; # Major HWY - thick
    return 2 if $cat eq 'H'; # Principal HWY - thick
    return 4 if $cat eq 'N'; # Arterial Road - medium
    return 6 if $cat eq 'NN'; # Road - thin
    return 20 if $cat =~ /^[RUB][ABC]?$/; # Railroad
    return 2816 if $cat eq 'Pl'; # Namedpoint (small point)
    warn "Unhandled cat <$cat>\n";
    return 22; # Trail
}
__END__
