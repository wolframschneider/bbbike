#!/usr/bin/env perl
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2020,2021 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use warnings;
use FindBin;
use lib "$FindBin::RealBin/..", "$FindBin::RealBin/../lib";

use DateTime;
use File::Basename qw(dirname);
use File::Path qw(make_path);
use Getopt::Long;

use Strassen::Mapillary;

my $mapillary_root = "$ENV{HOME}/.bbbike/mapillary";

sub usage (;$) {
    if ($_[0]) {
	warn "$_[0]\n";
    }
    die <<EOF;
usage: $0 [--user|username ...] [--city|region ...] [--start-time YYYY-MM-DD] [--skip-current-week]
EOF
}

GetOptions(
	   "user|username=s" => \my $username,
	   "city|region=s"   => \my $city_country,
	   "start-time=s"    => \my $start_time,
	   "end-time=s"      => \my $end_time,
	   "skip-current-week" => \my $skip_current_week,
	  )
    or usage;

if ((!$username && !$city_country) || ($username && $city_country)) {
    usage "Please specify either --username or --city\n";
}

my $bbox;
if ($city_country) {
    my $modname = "Geography::$city_country";
    if (!eval "require $modname") {
	die "Cannot load Geography module for '$city_country'. Maybe the name is mistyped? It should be something like 'Berlin_DE'. Error message: $@\n";
    }
    my $obj = $modname->new;
    if (!$obj->can('bbox_wgs84')) {
	die "Cannot get bbox from $modname, the bbox_wgs84 method is missing\n";
    }
    $bbox = $obj->bbox_wgs84;
}

my $mapillary_dir;
if ($username) {
    $mapillary_dir = "$mapillary_root/user:$username";
} else {
    $mapillary_dir = "$mapillary_root/$city_country";
}

if ($start_time) {
    if (my($y,$m,$d) = $start_time =~ m{^(\d+)-(\d+)-(\d+)}) {
	$start_time = DateTime->new(year => $y, month => $m, day => $d);
    } else {
	die "Cannot parse '$start_time' as ISO day\n";
    }
}

my $dt;
if ($end_time) {
    if (my($y,$m,$d) = $end_time =~ m{^(\d+)-(\d+)-(\d+)}) {
	$dt = DateTime->new(year => $y, month => $m, day => $d);
    } else {
	die "Cannot parse '$end_time' as ISO day\n";
    }
} else {
    $dt= DateTime->today;
}

my $is_partial = 1; # also a flag for: current week
while() {
    my($y,$w) = $dt->week;
    warn "*** Working on year=$y week=$w...\n";
    my $mapillary_weekfile = sprintf "%s/%04d/%02d%s.bbd", $mapillary_dir, $y, $w, ($is_partial ? '.partial' : '');
    if (!$is_partial && -s $mapillary_weekfile) {
	warn "    -> $mapillary_weekfile already exists, skipping...\n";
    } elsif ($is_partial && $skip_current_week) {
	warn "    -> skip current week\n";
    } else {
	my $obsolete_partial_file;
	if (!$is_partial) {
	    $obsolete_partial_file = sprintf "%s/%04d/%02d.partial.bbd", $mapillary_dir, $y, $w;
	}
	my $begin_week = $dt->clone->truncate(to => 'week')->strftime('%F');
	my $end_week   = $dt->clone->truncate(to => 'week')->add(days => 6)->strftime('%F');

	warn "    -> fetch $mapillary_weekfile...\n";

	my $sm = Strassen::Mapillary->new;
	$sm->fetch_sequences(
			     {
			      ($bbox     ? (bbox      => $bbox)     : ()),
			      ($username ? (username  => $username) : ()),
			      start_time => $begin_week,
			      end_time   => $end_week,
			     },
			     {
			      msgs => \my @msgs,
			      verbose => 1,
			     },
			    );
	if (@msgs) {
	    warn "NOTE: the fetch_sequences call returned the following messages:\n" . join("\n", @msgs) . "\n";
	}

	my $mapillary_year_dir = dirname($mapillary_weekfile);
	if (!-d $mapillary_year_dir) {
	    make_path $mapillary_year_dir;
	}

	$sm->write("$mapillary_weekfile~");
	rename "$mapillary_weekfile~", $mapillary_weekfile
	    or die "Error while renaming to $mapillary_weekfile: $!";

	if ($obsolete_partial_file && -e $obsolete_partial_file) {
	    warn "    -> remove $obsolete_partial_file...\n";
	    unlink $obsolete_partial_file;
	}
    }

    if (!$start_time) {
	last;
    }

    $dt = $dt->subtract(days => 7);
    last if $dt < $start_time;

    $is_partial = 0;
}

__END__

=head1 NAME

mapillary-downloader - download mapillary tracks for a user or a region

=head1 SYNOPSIS

Download for a user:

    mapillary-downloader --user username --start-time 2020-09-01

Download for a region:

    mapillary-downloader --region Berlin_DE --start-time 2020-09-01

=head1 DESCRIPTION

This script downloads mapillary tracks per week, converts them to bbd
files and stores them to F<~/.bbbike/mapillary>. User's tracks go into
a C<user:I<username>> subdirectory; region's tracks into a
subdirectory named by the region.

The track for the current week is typically incomplete, so it's stored
as C<I<year>/I<weeknumber>.partial.bbd>. On a later download the
"partial" file might be replaced by a non-partial file
C<I<year>/I<weeknumber>.bbd>.

Without the C<--start-time> option only the current week is downloaded

With the C<--skip-current-week> option the current week is not
downloaded.

=head1 SEE ALSO

L<mapillary-fetch>, L<Strassen::Mapillary>.

=cut

