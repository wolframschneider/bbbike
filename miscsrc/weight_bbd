#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2002,2003,2012,2013 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use FindBin;
use lib ("$FindBin::RealBin/..",
	 "$FindBin::RealBin/../lib");
use Strassen::Core;
use Getopt::Long;

my $out;
my $force;
my $do_scale_widths = 1;
my $do_distinguish_dir = 0;
my @scale_widths = (0.25, 0.5, 0.75, 1, 1.5, 2);
my $logarithmic = undef;
if (!GetOptions("logarithmic=f" => \$logarithmic,
		"f" => \$force,
		"o=s" => \$out,
		"scalewidths!" => \$do_scale_widths,
		"distinguish-dir!" => \$do_distinguish_dir,
	       )) {
    die "usage";
}
if (!defined $out) {
    die "Specify out file with -o option!";
}
if ($out !~ /\.bbd$/) {
    die "$out does not have .bbd extension!";
}

my $file = shift || "-";
my $s = Strassen->new($file) or die "Strassen file '$file' cannot be opened";
if (-e $out && !$force) {
    die "Will not overwrite existing file $out, to force use the -f option.\n";
}

my %net;
my %name;

$s->init;
while(1) {
    my $r = $s->next;
    last if !@{ $r->[Strassen::COORDS()] };
    for my $i (0 .. $#{ $r->[Strassen::COORDS()] }-1) {
	my $c1 = join(";", @{$r->[Strassen::COORDS()]}[$i,$i+1]);
	my $c2 = join(";", @{$r->[Strassen::COORDS()]}[$i+1,$i]);
	if (!$do_distinguish_dir) {
	    if (!exists $name{$c1}) {
		if (!exists $name{$c2}) {
		    $name{$c2} = $r->[Strassen::NAME()];
		}
		$net{$c2}++;
	    } else {
		$net{$c1}++;
	    }
	} else {
	    if (!exists $name{$c1}) {
		$name{$c1} = $r->[Strassen::NAME()];
	    }
	    $net{$c1}++;
	}
    }
}

my %net2cat;
my %cat;
# Calculate %net2cat (the mapping line -> category)
# Calculate %cat (existence hash of used categories)
# Modify %name (prepend $count before name)
while(my($k,$v) = each %net) {
    my $count = $v;
    if (defined $logarithmic) {
	$v = int(log($v)/log($logarithmic));
	$v = 1 if ($v < 1);
    }
    $net2cat{$k} = $v;
    $name{$k} = "$count: $name{$k}";
    $cat{$v}++;
}

{
    open my $OUT, ">", $out
	or die "Writing to $out failed: $!";

    for my $k (sort { $a <=> $b } keys %cat) {
	print $OUT "#: line_width.$k: ";
	if ($do_scale_widths) {
	    print $OUT join(",", map { my $w = int($k*$scale_widths[$_]);
				       $w == 0 ? 1 : $w;
			    } (0..5));
	} else {
	    print $OUT join(",", map { $k } (0..5));
	}
	print $OUT "\n";
    }
    print $OUT "#: line_color: #000080\n";
    if ($do_distinguish_dir) {
	print $OUT "#: line_directed_weight: 1\n";
	print $OUT "#: line_arrow: none\n";
    }
    print $OUT "#:\n"; # end of global directives

    while(my($k,$v) = each %net) {
	my($c1,$c2) = split /;/, $k;
	my $cat = $net2cat{$k};
	print $OUT $name{$k} . "\t" . $cat . ($do_distinguish_dir ? ';' : '') . " " . $c1 . " " . $c2 . "\n";
    }
    close $OUT;
}

__END__

=head1 NAME

weight_bbd - create weighted bbd files

=head1 DESCRIPTION

=head2 OPTIONS

  -logarithmic <real>: 1.5 seems a nice choise: 100 => 11, 500 => 15
  -f: force overwriting existing file
  -o outfile: bbd file for output
  -[no]scalewidths: scale widths (default: true)
  -[no]distinguish-dir: distinguish between both directions (default: false)

=head2 EXAMPLES

Create a weighted plot from bbbike.de coordssessions (session packed
in a zip file):

    YYYYMM=2013-02
    ~/src/bbbike/miscsrc/coordssession2bbd coordssession-$YYYYMM.zip > /tmp/$YYYYMM.bbd
    ~/src/bbbike/miscsrc/weight_bbd -logarithmic=2.5 -f -o /tmp/${YYYYMM}_weighted_25.bbd /tmp/$YYYYMM.bbd
    ~/src/bbbike/miscsrc/weight_bbd -distinguish-dir -logarithmic=2.5 -f -o /tmp/${YYYYMM}_weighted_dir_25.bbd /tmp/$YYYYMM.bbd

=head1 TODO

Convert script to not use .desc file anymore, but first the bbbike
handle_global_directives code has to deal with the generated arrays
for the line_width!

=cut
